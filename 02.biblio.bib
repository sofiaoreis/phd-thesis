%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CHAPTER 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@ARTICLE {9448435,
author = {S. Chakraborty and R. Krishna and Y. Ding and B. Ray},
journal = {IEEE Transactions on Software Engineering},
title = {Deep Learning-based Vulnerability Detection: Are We There Yet},
year = {5555},
volume = {},
number = {01},
issn = {1939-3520},
pages = {1-1},
keywords = {predictive models;neural networks;testing;data models;security;training;training data},
doi = {10.1109/TSE.2021.3087402},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
month = {jun}
}

@INPROCEEDINGS{7203049,
  author={Linares-Vásquez, Mario and Cortés-Coy, Luis Fernando and Aponte, Jairo and Poshyvanyk, Denys},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering}, 
  title={ChangeScribe: A Tool for Automatically Generating Commit Messages}, 
  year={2015},
  volume={2},
  number={},
  pages={709-712},
  doi={10.1109/ICSE.2015.229}}


@inproceedings{reis2017secbench,
  title={SECBENCH: A Database of Real Security Vulnerabilities.},
  author={Reis, Sofia and Abreu, Rui},
  booktitle={International Workshop on Secure Software Engineering in DevOps and Agile Development @ ESORICS},
  pages={69--85},
  year={2017}
}

@INPROCEEDINGS{9796324,  author={Reis, Sofia and Abreu, Rui and Erdogmus, Hakan and Păsăreanu, Corina},  booktitle={MSR'22},   title={SECOM: Towards a convention for security commit messages},   year={2022},  volume={},  number={},  pages={764-765},  doi={10.1145/3524842.3528513}}

@misc{blackhat,
title = {Scaling the Security Researcher to
Eliminate OSS Vulnerabilities Once and for All},
howpublished={\url{https://i.blackhat.com/USA-22/Thursday/US-22-Leitschuh-Scaling-the-Security-Researcher.pdf}},
author={Leitschuh, Jonathan and Way, Patrick},
note = {Accessed \today}
}


@inproceedings{mikheev-etal-1999-named,
    title = "Named Entity Recognition without Gazetteers",
    author = "Mikheev, Andrei  and
      Moens, Marc  and
      Grover, Claire",
    booktitle = "Ninth Conference of the {E}uropean Chapter of the Association for Computational Linguistics",
    month = jun,
    year = "1999",
    address = "Bergen, Norway",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/E99-1001",
    pages = "1--8",
}

@inproceedings{lample-etal-2016-neural,
    title = "Neural Architectures for Named Entity Recognition",
    author = "Lample, Guillaume  and
      Ballesteros, Miguel  and
      Subramanian, Sandeep  and
      Kawakami, Kazuya  and
      Dyer, Chris",
    booktitle = "Proceedings of the 2016 Conference of the North {A}merican Chapter of the Association for Computational Linguistics: Human Language Technologies",
    month = jun,
    year = "2016",
    address = "San Diego, California",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/N16-1030",
    doi = "10.18653/v1/N16-1030",
    pages = "260--270",
}

@inproceedings{10.1145/3475716.3475781,
author = {Croft, Roland and Newlands, Dominic and Chen, Ziyu and Babar, M. Ali},
title = {An Empirical Study of Rule-Based and Learning-Based Approaches for Static Application Security Testing},
year = {2021},
isbn = {9781450386654},
url = {https://doi.org/10.1145/3475716.3475781},
doi = {10.1145/3475716.3475781},
abstract = {Background: Static Application Security Testing (SAST) tools purport to assist developers in detecting security issues in source code. These tools typically use rule-based approaches to scan source code for security vulnerabilities. However, due to the significant shortcomings of these tools (i.e., high false positive rates), learning-based approaches for Software Vulnerability Prediction (SVP) are becoming a popular approach. Aims: Despite the similar objectives of these two approaches, their comparative value is unexplored. We provide an empirical analysis of SAST tools and SVP models, to identify their relative capabilities for source code security analysis. Method: We evaluate the detection and assessment performance of several common SAST tools and SVP models on a variety of vulnerability datasets. We further assess the viability and potential benefits of combining the two approaches. Results: SAST tools and SVP models provide similar detection capabilities, but SVP models exhibit better overall performance for both detection and assessment. Unification of the two approaches is difficult due to lacking synergies. Conclusions: Our study generates 12 main findings which provide insights into the capabilities and synergy of these two approaches. Through these observations we provide recommendations for use and improvement.},
booktitle = {ESEM'21},
articleno = {8},
numpages = {12},
keywords = {Security, Machine Learning, Static Application Security Testing},
location = {Bari, Italy}
}


@article{SSPatcher2022,
	abstract = {Timely patching (i.e., the act of applying code changes to a program source code) is paramount to safeguard users and maintainers against dire consequences of malicious attacks. In practice, patching is prioritized following the nature of the code change that is committed in the code repository. When such a change is labeled as being security-relevant, i.e., as fixing a vulnerability, maintainers rapidly spread the change, and users are notified about the need to update to a new version of the library or of the application. Unfortunately, oftentimes, some security-relevant changes go unnoticed as they represent silent fixes of vulnerabilities. In this paper, we propose SSPCatcher, a Co-Training-based approach to catch security patches (i.e., patches that address vulnerable code) as part of an automatic monitoring service of code repositories. Leveraging different classes of features, we empirically show that such automation is feasible and can yield a precision of over 80{\%} in identifying security patches, with an unprecedented recall of over 80{\%}. Beyond such a benchmarking with ground truth data which demonstrates an improvement over the state-of-the-art, we confirmed that SSPCatcher can help catch security patches that were not reported as such.},
	author = {Sawadogo, Arthur D. and Bissyand{\'e}, Tegawend{\'e}F. and Moha, Naouel and Allix, Kevin and Klein, Jacques and Li, Li and Le Traon, Yves},
	da = {2022/08/06},
	date-added = {2023-01-27 16:46:31 +0000},
	date-modified = {2023-01-27 16:46:31 +0000},
	doi = {10.1007/s10664-022-10168-9},
	id = {Sawadogo2022},
	isbn = {1573-7616},
	journal = {Empirical Software Engineering},
	number = {6},
	pages = {151},
	title = {SSPCatcher: Learning to catch security patches},
	ty = {JOUR},
	url = {https://doi.org/10.1007/s10664-022-10168-9},
	volume = {27},
	year = {2022},
	Bdsk-Url-1 = {https://doi.org/10.1007/s10664-022-10168-9}}

@misc{windows-cyberattack,
  AUTHOR =        {Brian Thomas},
  TITLE =         {New Windows Vulnerabilities Highlight Patch Management Challenges},
  MONTH =         {January},
  YEAR  =         {2020},
  howpublished   =         {\url{https://www.bitsight.com/blog/new-windows-vulnerabilities-highlight-patch-management-challenges}}
}

@misc{failed-to-deploy-patch,
  AUTHOR =        {Russell Brandom},
  TITLE =         {Former Equifax CEO blames breach on a single person who failed to deploy patch},
  INSTITUTION =   {The Verge},
  MONTH =         {October},
  YEAR  =         {2017},
  howpublished   =         {\url{https://www.theverge.com/2017/10/3/16410806/equifax-ceo-blame-breach-patch-congress-testimony}}
}

@misc{hacker-news-patches,
  AUTHOR =        {The Hacker News},
  TITLE =         {The Continuing Threat of Unpatched Security Vulnerabilities},
  INSTITUTION =   {The Hacker News},
  MONTH =         {March},
  YEAR  =         {2022},
  howpublished   =         {\url{https://thehackernews.com/2022/03/the-continuing-threat-of-unpatched.html}}
}

@misc{checkpoint,
  AUTHOR =        {Checkpoint},
  TITLE =         {Check Point Research: Cyber Attacks Increased 50\% Year over Year
},
  INSTITUTION =   {Checkpoint},
  howpublished   =         \url{{https://blog.checkpoint.com/2022/01/10/check-point-research-cyber-attacks-increased-50-year-over-year/}}
}

@misc{hacker-news-vmware,
  AUTHOR =        {Ravie Lakshmanan},
  TITLE =         {Iranian Hackers Targeting VMware Horizon Log4j Flaws to Deploy Ransomware},
  INSTITUTION =   {The Hacker News},
  MONTH =         {February},
  YEAR  =         {2022},
  howpublished   =         {\url{https://thehackernews.com/2022/02/iranian-hackers-targeting-vmware.html}}
}



@misc{it-horror-stories,
  AUTHOR =        {Team Ninja},
  TITLE =         {IT Horror Stories: How Unpatched Software Hurts Businesses},
  INSTITUTION =   {ninjaOne},
  MONTH =         {October},
  YEAR  =         {2022},
  howpublished   =         {\url{https://www.ninjaone.com/blog/it-horror-stories-why-unpatched-software-hurts-business/}}
}

@misc{what-if-you-cant-patch,
  AUTHOR =        {Scott Coleman},
  TITLE =         {WHAT IF YOU CAN’T PATCH?},
  INSTITUTION =   {Owl Cyber Defense Solutions},
  MONTH =         {September},
  YEAR  =         {2018},
  howpublished   =         {\url{https://www.cybersecurity-review.com/what-if-you-cant-patch/}}
}

@misc{osv-schema,
  AUTHOR =        {Oliver Chang and Russ Cox},
  TITLE =         {Open Source Vulnerability format},
  INSTITUTION =   {Open Source Security Foundation},
  MONTH =         {September},
  YEAR  =         {2022},
  howpublished   =         {\url{https://ossf.github.io/osv-schema/}}
}


@misc{non-applied-patches,
  AUTHOR =        {Help Net Security},
  TITLE =         {Majority of 2019 breaches were the result of unapplied security patches},
  INSTITUTION =   {Help Net Security},
  MONTH =         {October},
  YEAR  =         {2019},
  howpublished   =         {\url{https://www.helpnetsecurity.com/2019/10/30/unapplied-security-patches/}}
}

@inproceedings{Zhang2021AnIO,
  title={An Investigation of the Android Kernel Patch Ecosystem},
  author={Zheng Zhang},
  booktitle={USENIX Security Symposium},
  year={2021}
}

@article{DBLP:journals/corr/abs-1807-02458,
  author    = {Antonino Sabetta and
               Michele Bezzi},
  title     = {A Practical Approach to the Automatic Classification of Security-Relevant
               Commits},
  journal   = {CoRR},
  volume    = {abs/1807.02458},
  year      = {2018},
  url       = {http://arxiv.org/abs/1807.02458},
  eprinttype = {arXiv},
  eprint    = {1807.02458},
  timestamp = {Mon, 13 Aug 2018 16:47:57 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1807-02458.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{10.1145/3106237.3117771,
author = {Zhou, Yaqin and Sharma, Asankhaya},
title = {Automated Identification of Security Issues from Commit Messages and Bug Reports},
year = {2017},
isbn = {9781450351058},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106237.3117771},
doi = {10.1145/3106237.3117771},
abstract = {The number of vulnerabilities in open source libraries is increasing rapidly. However, the majority of them do not go through public disclosure. These unidentified vulnerabilities put developers' products at risk of being hacked since they are increasingly relying on open source libraries to assemble and build software quickly. To find unidentified vulnerabilities in open source libraries and secure modern software development, we describe an efficient automatic vulnerability identification system geared towards tracking large-scale projects in real time using natural language processing and machine learning techniques. Built upon the latent information underlying commit messages and bug reports in open source projects using GitHub, JIRA, and Bugzilla, our K-fold stacking classifier achieves promising results on vulnerability identification. Compared to the state of the art SVM-based classifier in prior work on vulnerability identification in commit messages, we improve precision by 54.55\% while maintaining the same recall rate. For bug reports, we achieve a much higher precision of 0.70 and recall rate of 0.71 compared to existing work. Moreover, observations from running the trained model at SourceClear in production for over 3 months has shown 0.83 precision, 0.74 recall rate, and detected 349 hidden vulnerabilities, proving the effectiveness and generality of the proposed approach.},
booktitle = {Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
pages = {914–919},
numpages = {6},
keywords = {commit, bug report, vulnerability identification, machine learning},
location = {Paderborn, Germany},
series = {ESEC/FSE 2017}
}

@INPROCEEDINGS{883028,
  author={Mockus and Votta},
  booktitle={Proceedings 2000 International Conference on Software Maintenance}, 
  title={Identifying reasons for software changes using historic databases}, 
  year={2000},
  volume={},
  number={},
  pages={120-130},
  doi={10.1109/ICSM.2000.883028}}


@inproceedings{10.1145/2950290.2950364,
author = {Zhu, Jiaxin and Zhou, Minghui and Mockus, Audris},
title = {Effectiveness of Code Contribution: From Patch-Based to Pull-Request-Based Tools},
year = {2016},
isbn = {9781450342186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2950290.2950364},
doi = {10.1145/2950290.2950364},
abstract = {Code contributions in Free/Libre and Open Source Software projects are controlled to maintain high-quality of software. Alternatives to patch-based code contribution tools such as mailing lists and issue trackers have been developed with the pull request systems being the most visible and widely available on GitHub. Is the code contribution process more effective with pull request systems? To answer that, we quantify the effectiveness via the rates contributions are accepted and ignored, via the time until the first response and final resolution and via the numbers of contributions. To control for the latent variables, our study includes a project that migrated from an issue tracker to the GitHub pull request system and a comparison between projects using mailing lists and pull request systems. Our results show pull request systems to be associated with reduced review times and larger numbers of contributions. However, not all the comparisons indicate substantially better accept or ignore rates in pull request systems. These variations may be most simply explained by the differences in contribution practices the projects employ and may be less affected by the type of tool. Our results clarify the importance of understanding the role of tools in effective management of the broad network of potential contributors and may lead to strategies and practices making the code contribution more satisfying and efficient from both contributors' and maintainers' perspectives.},
booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {871–882},
numpages = {12},
keywords = {FLOSS, pull request, mailing list, issue tracker, Code contribution, effectiveness},
location = {Seattle, WA, USA},
series = {FSE 2016}
}

@inproceedings{10.1145/2660267.2660329,
author = {Araujo, Frederico and Hamlen, Kevin W. and Biedermann, Sebastian and Katzenbeisser, Stefan},
title = {From Patches to Honey-Patches: Lightweight Attacker Misdirection, Deception, and Disinformation},
year = {2014},
isbn = {9781450329576},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2660267.2660329},
doi = {10.1145/2660267.2660329},
abstract = {Traditional software security patches often have the unfortunate side-effect of quickly alerting attackers that their attempts to exploit patched vulnerabilities have failed. Attackers greatly benefit from this information; it expedites their search for unpatched vulnerabilities, it allows them to reserve their ultimate attack payloads for successful attacks, and it increases attacker confidence in stolen secrets or expected sabotage resulting from attacks. To overcome this disadvantage, a methodology is proposed for reformulating a broad class of security patches into honey-patches - patches that offer equivalent security but that frustrate attackers' ability to determine whether their attacks have succeeded or failed. When an exploit attempt is detected, the honey-patch transparently and efficiently redirects the attacker to an unpatched decoy, where the attack is allowed to succeed. The decoy may host aggressive software monitors that collect important attack information, and deceptive files that disinform attackers. An implementation for three production-level web servers, including Apache HTTP, demonstrates that honey-patching can be realized for large-scale, performance-critical software applications with minimal overheads.},
booktitle = {Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security},
pages = {942–953},
numpages = {12},
keywords = {intrusion detection and prevention, honeypots},
location = {Scottsdale, Arizona, USA},
series = {CCS '14}
}

@article{Householder2020, author = "Allen Householder and Garret Wassermann and Arthur Manion and Christopher King", title = "{CERT® Guide to Coordinated Vulnerability Disclosure}", year = "2020", month = "9", url = "https://kilthub.cmu.edu/articles/report/CERT_Guide_to_Coordinated_Vulnerability_Disclosure/12367340", doi = "10.1184/R1/12367340.v1" } 

@techreport{10.5555/2206254,
author = {Mell, Peter M. and Bergeron, Tiffany and Henning, David},
title = {SP 800-40 Version 2.0. Creating a Patch and Vulnerability Management Program},
year = {2005},
publisher = {National Institute of Standards &amp; Technology},
address = {Gaithersburg, MD, USA},
abstract = {This document provides guidance on creating a security patch and vulnerability management program and testing the effectiveness of that program. The primary audience is security managers who are responsible for designing and implementing the program. However, this document also contains information useful to system administrators and operations personnel who are responsible for applying patches and deploying solutions (i.e., information related to testing patches and enterprise patching software).}
}

@article{DISSANAYAKE2022106771,
	abstract = {Context:
Software security patch management purports to support the process of patching known software security vulnerabilities. Patching security vulnerabilities in large and complex systems is a hugely challenging process that involves multiple stakeholders making several interdependent technological and socio-technical decisions. Given the increasing recognition of the importance of software security patch management, it is important and timely to systematically review and synthesise the relevant literature on this topic.
Objective:
This paper aims at systematically reviewing the state of the art of software security patch management to identify the socio-technical challenges in this regard, reported solutions (i.e., approaches, tools, and practices), the rigour of the evaluation and the industrial relevance of the reported solutions, and to identify the gaps for future research.
Method:
We conducted a systematic literature review of 72 studies published from 2002 to March 2020, with extended coverage until September 2020 through forward snowballing.
Results:
We identify 14 socio-technical challenges in software security patch management, 18 solution approaches, tools and practices mapped onto the software security patch management process. We provide a mapping between the solutions and challenges to enable a reader to obtain a holistic overview of the gap areas. The findings also reveal that only 20.8\% of the reported solutions have been rigorously evaluated in industrial settings.
Conclusion:
Our results reveal that 50\% of the common challenges have not been directly addressed in the solutions and that most of them (38.9\%) address the challenges in one phase of the process, namely vulnerability scanning, assessment and prioritisation. Based on the results that highlight the important concerns in software security patch management and the lack of solutions, we recommend a list of future research directions. This study also provides useful insights about different opportunities for practitioners to adopt new solutions and understand the variations of their practical utility.},
	author = {Nesara Dissanayake and Asangi Jayatilaka and Mansooreh Zahedi and M. Ali Babar},
	doi = {https://doi.org/10.1016/j.infsof.2021.106771},
	issn = {0950-5849},
	journal = {Information and Software Technology},
	keywords = {Security patch management, Vulnerability management, Systematic literature review},
	pages = {106771},
	title = {Software security patch management - A systematic literature review of challenges, approaches, tools and practices},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584921002147},
	volume = {144},
	year = {2022},
	Bdsk-Url-1 = {https://www.sciencedirect.com/science/article/pii/S0950584921002147},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.infsof.2021.106771}}


@misc{OPENSSF-CVD-GUIDE,
  AUTHOR =        {Madison Oliver and Jonathan Leitschuh},
  TITLE =         {Guidance for Security Researchers to Coordinate Vulnerability Disclosures with Open Source Software Projects},
  INSTITUTION =   {Open Source Security Foundation},
  MONTH =         {January},
  YEAR  =         {2023},
  howpublished   =         {\url{https://github.com/ossf/oss-vulnerability-guide/blob/main/finder-guide.md}}
}

@misc{CISA-ALERT,
  AUTHOR =        {Cybersecurity and Infrastructure Security Agency},
  TITLE =         {Alert (AA22-047A)
Russian State-Sponsored Cyber Actors Target Cleared Defense Contractor Networks to Obtain Sensitive U.S. Defense Information and Technology
},
  INSTITUTION =   {Cybersecurity and Infrastructure Security Agency},
  MONTH =         {February},
  YEAR  =         {2022},
  howpublished   =         {\url{https://www.cisa.gov/uscert/ncas/alerts/aa22-047a}}
}

@misc{OPENSSF-MISSION,
  AUTHOR = {Josh Aas et al.},
  TITLE =         {The Open Source Software Security Mobilization Plan},
  INSTITUTION =   {Open Source Security Foundation},
  YEAR  =         {2022},
  howpublished   =         {\url{https://8112310.fs1.hubspotusercontent-na1.net/hubfs/8112310/OpenSSF/OSS\%20Mobilization\%20Plan.pdf?utm_referrer=https\%3A\%2F\%2Fopenssf.org\%2Foss-security-mobilization-plan\%2F}}
}

@article{10.5555/3337432.3337437,
title = {Survey on International Standards and Best Practices for Patch Management of Complex Industrial Control Systems: The Critical Infrastructure of Particle Accelerators Case Study},
year = {2019},
issue_date = {January 2019},
publisher = {Inderscience Publishers},
address = {Geneva 15, CHE},
volume = {9},
number = {1–2},
issn = {1757-8779},
abstract = {Industrial control systems ICSs are control and data acquisition systems employed to control distributed assets with a centralised data acquisition and supervisory control. ICSs strictly rely on computer-based systems and on installed remote controllers, which are subject to a constant patch deployment to upgrade functionalities, to resolve security issues and to reduce potential flaws. The patch management is not a trivial process since it can introduce new vulnerabilities within the systems. A key factor to perform successful patch management is to comply with the recommendations provided by the international standards and by the best practices currently adopted in the industry. This paper surveys the few existing international standards on patch management and the best practices, currently adopted in industry, and evaluates the relevance of standards and the best practices to the context of critical infrastructures for particle accelerators.},
journal = {Int. J. Crit. Comput.-Based Syst.},
month = {jan},
pages = {115–132},
numpages = {18}
}

@inproceedings{10.5555/3488905.3488919,
author = {Tiefenau, Christian and H\"{a}ring, Maximilian and Krombholz, Katharina and Von Zezschwitz, Emanuel},
title = {Security, Availability, and Multiple Information Sources: Exploring Update Behavior of System Administrators},
year = {2020},
isbn = {978-1-939133-16-8},
publisher = {USENIX Association},
address = {USA},
abstract = {Experts agree that keeping systems up to date is a powerful security measure. Previous work found that users sometimes explicitly refrain from performing timely updates, e.g., due to bad experiences which has a negative impact on end-user security. Another important user group has been investigated less extensively: system administrators, who are responsible for keeping complex and heterogeneous system landscapes available and secure.In this paper, we sought to understand administrators' behavior, experiences, and attitudes regarding updates in a corporate environment. Based on the results of an interview study, we developed an online survey and quantified common practices and obstacles (e.g., downtime or lack of information about updates). The findings indicate that even experienced administrators struggle with update processes as the consequences of an update are sometimes hard to assess. Therefore, we argue that more usable monitoring and update processes are essential to guarantee IT security at scale.},
booktitle = {Proceedings of the Sixteenth USENIX Conference on Usable Privacy and Security},
articleno = {14},
numpages = {20},
series = {SOUPS'20}
}



@misc{snyk-report,
  AUTHOR =        {snyk},
  TITLE =         {Addressing Cybersecurity Challenges in Open Source Software},
  YEAR  =         {2022},
  howpublished   =         {\url{https://resources.snyk.io/state-of-open-source-security-report-2022}}
}

@misc{EQUIFAX-1,
  AUTHOR =        {Dan Goodin},
  TITLE =         {Failure to patch two-month-old bug led to massive Equifax breach},
  MONTH =         {September},
  YEAR  =         {2017},
  howpublished   =         {\url{https://arstechnica.com/information-technology/2017/09/massive-equifax-breach-caused-by-failure-to-patch-two-month-old-bug/}}
}

@inproceedings{hakala-pyysalo-2019-biomedical,
    title = "Biomedical Named Entity Recognition with Multilingual {BERT}",
    author = "Hakala, Kai  and
      Pyysalo, Sampo",
    booktitle = "Proceedings of the 5th Workshop on BioNLP Open Shared Tasks",
    month = nov,
    year = "2019",
    address = "Hong Kong, China",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/D19-5709",
    doi = "10.18653/v1/D19-5709",
    pages = "56--61",
    abstract = "We present the approach of the Turku NLP group to the PharmaCoNER task on Spanish biomedical named entity recognition. We apply a CRF-based baseline approach and multilingual BERT to the task, achieving an F-score of 88{\%} on the development data and 87{\%} on the test set with BERT. Our approach reflects a straightforward application of a state-of-the-art multilingual model that is not specifically tailored to either the language nor the application domain. The source code is available at: https://github.com/chaanim/pharmaconer",
}

@inproceedings{gonzalez-agirre-etal-2019-pharmaconer,
    title = "{P}harma{C}o{NER}: Pharmacological Substances, Compounds and proteins Named Entity Recognition track",
    author = "Gonzalez-Agirre, Aitor  and
      Marimon, Montserrat  and
      Intxaurrondo, Ander  and
      Rabal, Obdulia  and
      Villegas, Marta  and
      Krallinger, Martin",
    booktitle = "Proceedings of the 5th Workshop on BioNLP Open Shared Tasks",
    month = nov,
    year = "2019",
    address = "Hong Kong, China",
    publisher = "Association for Computational Linguistics",
    url = "https://aclanthology.org/D19-5701",
    doi = "10.18653/v1/D19-5701",
    pages = "1--10",
    abstract = "One of the biomedical entity types of relevance for medicine or biosciences are chemical compounds and drugs. The correct detection these entities is critical for other text mining applications building on them, such as adverse drug-reaction detection, medication-related fake news or drug-target extraction. Although a significant effort was made to detect mentions of drugs/chemicals in English texts, so far only very limited attempts were made to recognize them in medical documents in other languages. Taking into account the growing amount of medical publications and clinical records written in Spanish, we have organized the first shared task on detecting drug and chemical entities in Spanish medical documents. Additionally, we included a clinical concept-indexing sub-track asking teams to return SNOMED-CT identifiers related to drugs/chemicals for a collection of documents. For this task, named PharmaCoNER, we generated annotation guidelines together with a corpus of 1,000 manually annotated clinical case studies. A total of 22 teams participated in the sub-track 1, (77 system runs), and 7 teams in the sub-track 2 (19 system runs). Top scoring teams used sophisticated deep learning approaches yielding very competitive results with F-measures above 0.91. These results indicate that there is a real interest in promoting biomedical text mining efforts beyond English. We foresee that the PharmaCoNER annotation guidelines, corpus and participant systems will foster the development of new resources for clinical and biomedical text mining systems of Spanish medical data.",
}

@inproceedings{10.5555/3361338.3361399,
author = {Dong, Ying and Guo, Wenbo and Chen, Yueqi and Xing, Xinyu and Zhang, Yuqing and Wang, Gang},
title = {Towards the Detection of Inconsistencies in Public Security Vulnerability Reports},
year = {2019},
isbn = {9781939133069},
publisher = {USENIX Association},
address = {USA},
abstract = {Public vulnerability databases such as the Common Vulnerabilities and Exposures (CVE) and the National Vulnerability Database (NVD) have achieved great success in promoting vulnerability disclosure and mitigation. While these databases have accumulated massive data, there is a growing concern for their information quality and consistency.In this paper, we propose an automated system VIEM to detect inconsistent information between the fully standardized NVD database and the unstructured CVE descriptions and their referenced vulnerability reports. VIEM allows us, for the first time, to quantify the information consistency at a massive scale, and provides the needed tool for the community to keep the CVE/NVD databases up-to-date. VIEM is developed to extract vulnerable software names and vulnerable versions from unstructured text. We introduce customized designs to deep-learning-based named entity recognition (NER) and relation extraction (RE) so that VIEM can recognize previous unseen software names and versions based on sentence structure and contexts. Ground-truth evaluation shows the system is highly accurate (0.941 precision and 0.993 recall). Using VIEM, we examine the information consistency using a large dataset of 78,296 CVE IDs and 70,569 vulnerability reports in the past 20 years. Our result suggests that inconsistent vulnerable software versions are highly prevalent. Only 59.82\% of the vulnerability reports/CVE summaries strictly match the standardized NVD entries, and the inconsistency level increases over time. Case studies confirm the erroneous information of NVD that either overclaims or underclaims the vulnerable software versions.},
booktitle = {Proceedings of the 28th USENIX Conference on Security Symposium},
pages = {869–885},
numpages = {17},
location = {Santa Clara, CA, USA},
series = {SEC'19}
}


@ARTICLE{9039685,
  author={Li, Jing and Sun, Aixin and Han, Jianglei and Li, Chenliang},
  journal={IEEE Transactions on Knowledge and Data Engineering}, 
  title={A Survey on Deep Learning for Named Entity Recognition}, 
  year={2022},
  volume={34},
  number={1},
  pages={50-70},
  doi={10.1109/TKDE.2020.2981314}}


@misc{SOFT-PATCH-MANAG-NIST,
  AUTHOR =        {Murugiah Souppaya and Karen Scarfone},
  TITLE =         {Guide to Enterprise Patch
Management Technologies},
  INSTITUTION =   {National Institute of Standard and Technology},
  MONTH =         {July},
  YEAR  =         {2013},
  howpublished   =         {\url{https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-40r3.pdf}}
}

@INPROCEEDINGS{8809499,
  author={Wang, Xinda and Sun, Kun and Batcheller, Archer and Jajodia, Sushil},
  booktitle={2019 49th Annual IEEE/IFIP International Conference on tndable Systems and Networks (DSN)}, 
  title={Detecting "0-Day" Vulnerability: An Empirical Study of Secret Security Patch in OSS}, 
  year={2019},
  volume={},
  number={},
  pages={485-492},
  doi={10.1109/DSN.2019.00056}}



@article{attacks-patch,
	abstract = {Research in information security, risk management and investment has grown in importance over the last few years. However, without reliable estimates on attack probabilities, risk management is difficult to do in practice. Using a novel data set, we provide estimates on attack propensity and how it changes with disclosure and patching of vulnerabilities. Disclosure of software vulnerability has been controversial. On one hand are those who propose full and instant disclosure whether the patch is available or not and on the other hand are those who argue for limited or no disclosure. Which of the two policies is socially optimal depends critically on how attack frequency changes with disclosure and patching. In this paper, we empirically explore the impact of vulnerability information disclosure and availability of patches on attacks targeting the vulnerability. Our results suggest that on an average both secret (non-published) and published (published and not patched) vulnerabilities attract fewer attacks than patched (published and patched) vulnerabilities. When we control for time since publication and patches, we find that patching an already known vulnerability decreases the number of attacks, although attacks gradually increase with time after patch release. Patching an unknown vulnerability, however, causes a spike in attacks, which then gradually decline after patch release. Attacks on secret vulnerabilities slowly increase with time until the vulnerability is published and then attacks rapidly decrease with time after publication.},
	author = {Arora, Ashish and Nandkumar, Anand and Telang, Rahul},
	da = {2006/12/01},
	date-added = {2023-01-23 11:59:13 +0000},
	date-modified = {2023-01-23 11:59:13 +0000},
	doi = {10.1007/s10796-006-9012-5},
	id = {Arora2006},
	isbn = {1572-9419},
	journal = {Information Systems Frontiers},
	number = {5},
	pages = {350--362},
	title = {Does information security attack frequency increase with vulnerability disclosure? An empirical analysis},
	ty = {JOUR},
	url = {https://doi.org/10.1007/s10796-006-9012-5},
	volume = {8},
	year = {2006},
	Bdsk-Url-1 = {https://doi.org/10.1007/s10796-006-9012-5}}


@inproceedings{10.1145/3133956.3134072,
author = {Li, Frank and Paxson, Vern},
title = {A Large-Scale Empirical Study of Security Patches},
year = {2017},
isbn = {9781450349468},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133956.3134072},
doi = {10.1145/3133956.3134072},
abstract = {Given how the "patching treadmill" plays a central role for enabling sites to counter emergent security concerns, it behooves the security community to understand the patch development process and characteristics of the resulting fixes. Illumination of the nature of security patch development can inform us of shortcomings in existing remediation processes and provide insights for improving current practices. In this work we conduct a large-scale empirical study of security patches, investigating more than 4,000 bug fixes for over 3,000 vulnerabilities that affected a diverse set of 682 open-source software projects. For our analysis we draw upon the National Vulnerability Database, information scraped from relevant external references, affected software repositories, and their associated security fixes. Leveraging this diverse set of information, we conduct an analysis of various aspects of the patch development life cycle, including investigation into the duration of impact a vulnerability has on a code base, the timeliness of patch development, and the degree to which developers produce safe and reliable fixes. We then characterize the nature of security fixes in comparison to other non-security bug fixes, exploring the complexity of different types of patches and their impact on code bases.Among our findings we identify that: security patches have a lower footprint in code bases than non-security bug patches; a third of all security issues were introduced more than 3 years prior to remediation; attackers who monitor open-source repositories can often get a jump of weeks to months on targeting not-yet-patched systems prior to any public disclosure and patch distribution; nearly 5\% of security fixes negatively impacted the associated software; and 7\% failed to completely remedy the security hole they targeted.},
booktitle = {CCS'17},
pages = {2201–2215},
numpages = {15},
keywords = {security patches, empirical study, vulnerabilities, patch complexity},
location = {Dallas, Texas, USA},
}

@article{DBLP:journals/corr/abs-1806-05893,
  author    = {Serena Elisa Ponta and
               Henrik Plate and
               Antonino Sabetta},
  title     = {Beyond Metadata: Code-centric and Usage-based Analysis of Known Vulnerabilities
               in Open-source Software},
  journal   = {CoRR},
  volume    = {abs/1806.05893},
  year      = {2018},
  url       = {http://arxiv.org/abs/1806.05893},
  eprinttype = {arXiv},
  eprint    = {1806.05893},
  timestamp = {Mon, 13 Aug 2018 16:49:11 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1806-05893.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@INPROCEEDINGS{9678720,
  author={Zhou, Jiayuan and Pacheco, Michael and Wan, Zhiyuan and Xia, Xin and Lo, David and Wang, Yuan and Hassan, Ahmed E.},
  booktitle={2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={Finding A Needle in a Haystack: Automated Mining of Silent Vulnerability Fixes}, 
  year={2021},
  volume={},
  number={},
  pages={705-716},
  doi={10.1109/ASE51524.2021.9678720}}


@inproceedings{Tian_2022,
	doi = {10.1145/3510003.3510205},
  
	url = {https://doi.org/10.1145%2F3510003.3510205},
  
	year = 2022,
	month = {may},
  
	publisher = {{ACM}
},
  
	author = {Yingchen Tian and Yuxia Zhang and Klaas-Jan Stol and Lin Jiang and Hui Liu},
	title = {What makes a good commit message?},
	booktitle = {ICSE'22}
}

@inproceedings{DBLP:conf/soups/LiRMMC19,
  author    = {Frank Li and
               Lisa Rogers and
               Arunesh Mathur and
               Nathan Malkin and
               Marshini Chetty},
  title     = {Keepers of the Machines: Examining How System Administrators Manage
               Software Updates For Multiple Machines},
  booktitle = {{SOUPS} @ {USENIX} Security Symposium},
  publisher = {{USENIX} Association},
  year      = {2019}
}

@misc{https://doi.org/10.48550/arxiv.2301.06959,
  doi = {10.48550/ARXIV.2301.06959},
  
  url = {https://arxiv.org/abs/2301.06959},
  
  author = {Reis, Sofia and Pasareanu, Corina and Abreu, Rui and Erdogmus, Hakan},
  
  keywords = {Cryptography and Security (cs.CR), Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences},
  
  title = {SECOMlint: A linter for Security Commit Messages},
  
  publisher = {arXiv},
  
  year = {2023},
  
  copyright = {Creative Commons Attribution 4.0 International}
}


@inproceedings{DBLP:conf/esorics/ReisA17,
	author = {Sofia Reis and Rui Abreu},
	bibsource = {dblp computer science bibliography, https://dblp.org},
	biburl = {https://dblp.org/rec/conf/esorics/ReisA17.bib},
	booktitle = {International Workshop on Secure Software Engineering in DevOps and Agile Development co-located with the {(ESORICS} 2017), Oslo, Norway, September 14, 2017},
	pages = {69--85},
	title = {{SECBENCH:} {A} Database of Real Security Vulnerabilities},
	url = {http://ceur-ws.org/Vol-1977/paper6.pdf},
	year = {2017},
	Bdsk-Url-1 = {http://ceur-ws.org/Vol-1977/paper6.pdf}}


@inbook{10.1145/3379597.3387501,
author = {Fan, Jiahao and Li, Yi and Wang, Shaohua and Nguyen, Tien N.},
title = {A C/C++ Code Vulnerability Dataset with Code Changes and CVE Summaries},
year = {2020},
isbn = {9781450375177},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3379597.3387501},
abstract = {We collected a large C/C++ code vulnerability dataset from open-source Github projects, namely Big-Vul. We crawled the public Common Vulnerabilities and Exposures (CVE) database and CVE-related source code repositories. Specifically, we collected the descriptive information of the vulnerabilities from the CVE database, e.g., CVE IDs, CVE severity scores, and CVE summaries. With the CVE information and its related published Github code repository links, we downloaded all of the code repositories and extracted vulnerability related code changes. In total, Big-Vul contains 3,754 code vulnerabilities spanning 91 different vulnerability types. All these code vulnerabilities are extracted from 348 Github projects. All information is stored in the CSV format. We linked the code changes with the CVE descriptive information. Thus, our Big-Vul can be used for various research topics, e.g., detecting and fixing vulnerabilities, analyzing the vulnerability related code changes. Big-Vul is publicly available on Github.},
booktitle = {Proceedings of the 17th International Conference on Mining Software Repositories},
pages = {508–512},
numpages = {5}
}

@inproceedings{10.1109/MSR.2019.00064,
author = {Ponta, Serena E. and Plate, Henrik and Sabetta, Antonino and Bezzi, Michele and Dangremont, C\'{e}dric},
title = {A Manually-Curated Dataset of Fixes to Vulnerabilities of Open-Source Software},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2019.00064},
doi = {10.1109/MSR.2019.00064},
abstract = {Advancing our understanding of software vulnerabilities, automating their identification, the analysis of their impact, and ultimately their mitigation is necessary to enable the development of software that is more secure.While operating a vulnerability assessment tool, which we developed, and that is currently used by hundreds of development units at SAP, we manually collected and curated a dataset of vulnerabilities of open-source software, and the commits fixing them. The data were obtained both from the National Vulnerability Database (NVD), and from project-specific web resources, which we monitor on a continuous basis.From that data, we extracted a dataset that maps 624 publicly disclosed vulnerabilities affecting 205 distinct open-source Java projects, used in SAP products or internal tools, onto the 1282 commits that fix them. Out of 624 vulnerabilities, 29 do not have a CVE (Common Vulnerability and Exposure) identifier at all, and 46, which do have such identifier assigned by a numbering authority, are not available in the NVD yet.The dataset is released under an open-source license, together with supporting scripts that allow researchers to automatically retrieve the actual content of the commits from the corresponding repositories, and to augment the attributes available for each instance. Moreover, these scripts allow to complement the dataset with additional instances that are not security fixes (which is useful, for example, in machine learning applications).Our dataset has been successfully used to train classifiers that could automatically identify security-relevant commits in code repositories. The release of this dataset and the supporting code as open-source will allow future research to be based on data of industrial relevance; it also represents a concrete step towards making the maintenance of this dataset a shared effort involving open-source communities, academia, and the industry.},
booktitle = {Proceedings of the 16th International Conference on Mining Software Repositories},
pages = {383–387},
numpages = {5},
location = {Montreal, Quebec, Canada},
series = {MSR '19}
}



@article{HANIF2021103009,
	abstract = {The detection of software vulnerability requires critical attention during the development phase to make it secure and less vulnerable. Vulnerable software always invites hackers to perform malicious activities and disrupt the operation of the software, which leads to millions in financial losses to software companies. In order to reduce the losses, there are many reliable and effective vulnerability detection systems introduced by security communities aiming to detect the software vulnerabilities as early as in the development or testing phases. To summarise the software vulnerability detection system, existing surveys discussed the conventional and data mining approaches. These approaches are widely used and mostly consist of traditional detection techniques. However, they lack discussion on the newly trending machine learning approaches, such as supervised learning and deep learning techniques. Furthermore, existing studies fail to discuss the growing research interest in the software vulnerability detection community throughout the years. With more discussion on this, we can predict and focus on what are the research problems in software vulnerability detection that need to be urgently addressed. Aiming to reduce these gaps, this paper presents the research interests' taxonomy in software vulnerability detection, such as methods, detection, features, code and dataset. The research interest categories exhibit current trends in software vulnerability detection. The analysis shows that there is considerable interest in addressing methods and detection problems, while only a few are interested in code and dataset problems. This indicates that there is still much work to be done in terms of code and dataset problems in the future. Furthermore, this paper extends the machine learning approaches taxonomy, which is used to detect the software vulnerabilities, like supervised learning, semi-supervised learning, ensemble learning and deep learning. Based on the analysis, supervised learning and deep learning approaches are trending in the software vulnerability detection community as these techniques are able to detect vulnerabilities such as buffer overflow, SQL injection and cross-site scripting effectively with a significant detection performance, up to 95\% of F1 score. Finally, this paper concludes with several discussions on potential future work in software vulnerability detection in terms of datasets, multi-vulnerabilities detection, transfer learning and real-world applications.},
	author = {Hazim Hanif and Mohd Hairul Nizam {Md Nasir} and Mohd Faizal {Ab Razak} and Ahmad Firdaus and Nor Badrul Anuar},
	doi = {https://doi.org/10.1016/j.jnca.2021.103009},
	issn = {1084-8045},
	journal = {Journal of Network and Computer Applications},
	keywords = {Software vulnerability detection, Software security, Computer security, Machine learning, Deep learning},
	pages = {103009},
	title = {The rise of software vulnerability: Taxonomy of software vulnerabilities detection and machine learning approaches},
	url = {https://www.sciencedirect.com/science/article/pii/S1084804521000369},
	volume = {179},
	year = {2021},
	Bdsk-Url-1 = {https://www.sciencedirect.com/science/article/pii/S1084804521000369},
	Bdsk-Url-2 = {https://doi.org/10.1016/j.jnca.2021.103009}}

@inbook{10.1109/ICSE-SEIP52600.2021.00020,
author = {Zheng, Yunhui and Pujar, Saurabh and Lewis, Burn and Buratti, Luca and Epstein, Edward and Yang, Bo and Laredo, Jim and Morari, Alessandro and Su, Zhong},
title = {D2A: A Dataset Built for AI-Based Vulnerability Detection Methods Using Differential Analysis},
year = {2021},
isbn = {9780738146690},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-SEIP52600.2021.00020},
abstract = {Static analysis tools are widely used for vulnerability detection as they understand programs with complex behavior and millions of lines of code. Despite their popularity, static analysis tools are known to generate an excess of false positives. The recent ability of Machine Learning models to understand programming languages opens new possibilities when applied to static analysis. However, existing datasets to train models for vulnerability identification suffer from multiple limitations such as limited bug context, limited size, and synthetic and unrealistic source code. We propose D2A, a differential analysis based approach to label issues reported by static analysis tools. The D2A dataset is built by analyzing version pairs from multiple open source projects. From each project, we select bug fixing commits and we run static analysis on the versions before and after such commits. If some issues detected in a before-commit version disappear in the corresponding after-commit version, they are very likely to be real bugs that got fixed by the commit. We use D2A to generate a large labeled dataset to train models for vulnerability identification. We show that the dataset can be used to build a classifier to identify possible false alarms among the issues reported by static analysis, hence helping developers prioritize and investigate potential true positives first.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Software Engineering in Practice},
pages = {111–120},
numpages = {10}
}

@misc{cve-example,
title = {CVE-2022-3592 Report},
howpublished={\url{https://nvd.nist.gov/vuln/detail/CVE-2022-35928}},
note = {Accessed \today}
}


@misc{convcom,
title = {Conventional Commits},
howpublished={\url{https://www.conventionalcommits.org/en/v1.0.0/}},
note = {Accessed \today}
}

@misc{atomic,
 author = {Sean Patterson},
 title = {Developer Tip: Keep Your Commits "Atomic"},
 howpublished = {\url{https://www.freshconsulting.com/insights/blog/atomic-commits/}},
 note = {Accessed \today},
 originalyear = {2013}
}

@misc{linus,
 author = {Linus Torvalds},
 title = {Linus Torvalds describes a good commit message.},
 howpublished = {\url{https://github.com/torvalds/subsurface-for-dirk/blob/a48494d2fbed58c751e9b7e8fbff88582f9b2d02/README#L88}},
 note = {Accessed \today},
 originalyear = {2015}
}

@inproceedings{10.1145/3475960.3475985,
author = {Bhandari, Guru and Naseer, Amara and Moonen, Leon},
title = {CVEfixes: Automated Collection of Vulnerabilities and Their Fixes from Open-Source Software},
year = {2021},
isbn = {9781450386807},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3475960.3475985},
doi = {10.1145/3475960.3475985},
abstract = {Data-driven research on the automated discovery and repair of security vulnerabilities in source code requires comprehensive datasets of real-life vulnerable code and their fixes. To assist in such research, we propose a method to automatically collect and curate a comprehensive vulnerability dataset from Common Vulnerabilities and Exposures (CVE) records in the National Vulnerability Database (NVD). We implement our approach in a fully automated dataset collection tool and share an initial release of the resulting vulnerability dataset named CVEfixes. The CVEfixes collection tool automatically fetches all available CVE records from the NVD, gathers the vulnerable code and corresponding fixes from associated open-source repositories, and organizes the collected information in a relational database. Moreover, the dataset is enriched with meta-data such as programming language, and detailed code and security metrics at five levels of abstraction. The collection can easily be repeated to keep up-to-date with newly discovered or patched vulnerabilities. The initial release of CVEfixes spans all published CVEs up to 9 June 2021, covering 5365 CVE records for 1754 open-source projects that were addressed in a total of 5495 vulnerability fixing commits. CVEfixes supports various types of data-driven software security research, such as vulnerability prediction, vulnerability classification, vulnerability severity prediction, analysis of vulnerability-related code changes, and automated vulnerability repair.},
booktitle = {Proceedings of the 17th International Conference on Predictive Models and Data Analytics in Software Engineering},
pages = {30–39},
numpages = {10},
keywords = {vulnerability prediction, source code repair, Security vulnerabilities, vulnerability classification, dataset, software repository mining},
location = {Athens, Greece},
series = {PROMISE 2021}
}

@misc{goodcommit,
 author = {Chris Beams},
 title = {How to Write a Git Commit Message},
 howpublished = {\url{https://cbea.ms/git-commit/}},
 note = {Accessed \today},
 originalyear = {2014}
}

@article{DBLP:journals/corr/abs-2001-09148,
  author    = {Arthur D. Sawadogo and
               Tegawend{\'{e}} F. Bissyand{\'{e}} and
               Naouel Moha and
               Kevin Allix and
               Jacques Klein and
               Li Li and
               Yves Le Traon},
  title     = {Learning to Catch Security Patches},
  journal   = {CoRR},
  volume    = {abs/2001.09148},
  year      = {2020},
  url       = {https://arxiv.org/abs/2001.09148},
  eprinttype = {arXiv},
  eprint    = {2001.09148},
  timestamp = {Thu, 30 Jan 2020 18:46:36 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2001-09148.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{cvedetails,
 title = {CVE Details: The ultimate security vulnerability datasource},
 howpublished = {\url{https://www.cvedetails.com/}},
 note = {Accessed \today}
}

@inproceedings{10.1145/3593434.3593481,
author = {Reis, Sofia and Abreu, Rui and Pasareanu, Corina},
title = {Are Security Commit Messages Informative? Not Enough!},
year = {2023},
isbn = {9798400700446},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3593434.3593481},
doi = {10.1145/3593434.3593481},
abstract = {The fast distribution and deployment of security patches are important to protect users against cyberattacks. These fixes can be detected automatically by patch management triage systems. However, previous work has shown that automating the task is not easy, in some cases, because of poor documentation or lack of information in security fixes. For many years, standard practices in the security community have steered engineers to provide cryptic commit messages (i.e., patch software vulnerabilities silently) to avoid potential attacks and reputation damage. However, not providing enough documentation on vulnerability fixes can hinder trust between vendors and users. Current efforts in the security community aim to increase the level of transparency during patch and disclosing times to help build trust in the development community and make patch management processes faster. In this paper, we evaluate how informative security commit messages (i.e., messages attached to security fixes) are and how different levels of information can affect different tasks in automated patch triage systems. We observed that security engineers, in general, do not provide enough detail to enable the three automated triage systems at the same time. In addition, results show that security commit messages need to be more informative—56.7\% of the messages analyzed were documented poorly. Best practices to write informative and well-structured security commit messages (such as SECOM) should become a standard practice in the security community.},
booktitle = {Proceedings of the 27th International Conference on Evaluation and Assessment in Software Engineering},
pages = {196–199},
numpages = {4},
keywords = {Commit Messages, Convention, Best Practices, Security, Patch Management Process},
location = {Oulu, Finland},
series = {EASE '23}
}

@misc{nvd,
 author = {NIST},
 title = {National Vulnerability Database},
 howpublished = {\url{https://nvd.nist.gov/}},
 note = {Accessed \today}
}

@misc{osv,
 author = {Google},
 title = {A distributed vulnerability database for Open Source},
 howpublished = {\url{https://osv.dev/}},
 note = {Accessed \today}
}

@misc{mend,
author = {White Source Ltd.},
 title = {Mend Vulnerability Database: The largest open source vulnerability DB},
 howpublished = {\url{https://www.mend.io/vulnerability-database/}},
 note = {Accessed \today}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CHAPTER 4
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@Misc{paloalto-unit42,
   title={Palo Alto Networks. Unit 42 Cloud Threat Report 2H 2020},
   year=2020,
   note={\url{https://www.paloaltonetworks.com/prisma/unit42-cloud-threat-research}}
}

@inproceedings{duan2020measuring,
      title={Towards Measuring Supply Chain Attacks on Package Managers for Interpreted Languages}, 
      author={Ruian Duan and Omar Alrawi and Ranjita Pai Kasturi and Ryan Elder and Brendan Saltaformaggio and Wenke Lee},
      booktitle={Network and Distributed Systems Security Symposium},
      year={2021},
      doi={10.14722/ndss.2021.23055},  
      series={NDSS'21}
}

@ARTICLE{9388795,  
author={Rahman, Akond and Williams, Laurie},  
journal={IEEE Security   Privacy},   
title={Different Kind of Smells: Security Smells in Infrastructure as Code Scripts},   
year={2021},  
volume={19},  
number={3},  
pages={33-41},  
series={S\&P'21},
doi={10.1109/MSEC.2021.3065190}
}


@Misc{pattern-analyzer,
   title={PatternAnalyzer},
   year=2020,
   note={\url{https://pypi.org/project/textblob-fr/}}
}

@article{DistefanoEtAlCACM2019,
author = {Distefano, Dino and F\"{a}hndrich, Manuel and Logozzo, Francesco and O'Hearn, Peter W.},
title = {Scaling Static Analyses at Facebook},
year = {2019},
issue_date = {August 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {62},
number = {8},
issn = {0001-0782},
url = {https://doi.org/10.1145/3338112},
doi = {10.1145/3338112},
abstract = {Key lessons for designing static analyses tools deployed to find bugs in hundreds of millions of lines of code.},
journal = {Communications of the ACM},
month = jul,
pages = {62–70},
numpages = {9}
}

@Misc{puppet-website,
   title={Puppet website},
   year=2020,
   note={\url{https://puppet.com/}}
}

@Misc{ansible-website,
   title={Ansible website},
   year=2020,
   note={\url{https://www.ansible.com/}}
}

@Misc{chef-website,
   title={Chef website},
   year=2020,
   note={\url{https://www.chef.io/}}
}

@Misc{slic-repo,
title={{SLIC} repository},
note={\url{https://github.com/akondrahman/IacSec/}}
}

@article{strat-sampling,
  title={Variance reduction},
  author={Botev, Zdravko and Ridder, Ad},
  journal={Wiley StatsRef: Statistics Reference Online},
  pages={1--6},
  year={2014},
  publisher={Wiley Online Library}
}

@Misc{mitm,
title={Man-in-the-middle attack},
note={\url{https://owasp.org/www-community/attacks/Man-in-the-middle_attack}}
}

@Misc{cwe-259,
tile={CWE-259},
note={\url{https://cwe.mitre.org/data/definitions/259.html}}
}

@Misc{cwe-798,
tile={CWE-798},
note={\url{https://cwe.mitre.org/data/definitions/798.html}}
}

@Misc{cwe-319,
tile={CWE-319},
note={\url{https://cwe.mitre.org/data/definitions/319.html}}
}

@Misc{cwe-546,
tile={CWE-546},
note={\url{https://cwe.mitre.org/data/definitions/546.html}}
}

@Misc{cwe-326,
tile={CWE-326},
note={\url{https://cwe.mitre.org/data/definitions/326.html}}
}

@Misc{cwe-327,
tile={CWE-327},
note={\url{https://cwe.mitre.org/data/definitions/327.html}}
}

@Misc{cwe-284,
tile={CWE-284},
note={\url{https://cwe.mitre.org/data/definitions/284.html}}
}

@Misc{cwe-258,
tile={CWE-258},
note={\url{https://cwe.mitre.org/data/definitions/258.html}}
}

@Misc{cwe-250,
tile={CWE-250},
note={\url{https://cwe.mitre.org/data/definitions/250.html}}
}

@Misc{empty-pass,
tile={Empty String Password},
note={\url{https://owasp.org/www-community/vulnerabilities/Empty_String_Password}}
}

@Misc{admin-default,
tile={Why You Should Not Use an Admin Account},
note={\url{https://www.lbmc.com/blog/why-you-should-not-use-an-admin-account/}}
}

@inproceedings{rahman2017factors,
  title={Which Factors Influence Practitioners’ Usage of Build Automation Tools?},
  author={Rahman, Akond and Partho, Asif and Meder, David and Williams, Laurie},
  booktitle={IEEE/ACM International Workshop on Rapid Continuous Software Engineering},
  pages={20--26},
  year={2017},
  series={RCoSE'17},
  doi={10.1109/RCoSE.2017.8}
}

@InProceedings{10.1007/11426639_2,
author="Wang, Xiaoyun
and Yu, Hongbo",
editor="Cramer, Ronald",
title="How to Break MD5 and Other Hash Functions",
booktitle="Advances in Cryptology",
year="2005",
pages="19--35",
isbn="978-3-540-32055-5",
series={EUROCRYPT'05}
}

@inproceedings{DBLP:conf/raid/Mutaf99,
  author    = {Pars Mutaf},
  title     = {Defending against a Denial-of-Service Attack on {TCP}},
  booktitle = {Recent Advances in Intrusion Detection, Second International Workshop},
  year      = {1999},
  series    = {RAID'99}
}

@inproceedings{10.1145/2961111.2962628,
author = {Baltes, Sebastian and Diehl, Stephan},
title = {Worse Than Spam: Issues In Sampling Software Developers},
year = {2016},
isbn = {9781450344272},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2961111.2962628},
doi = {10.1145/2961111.2962628},
abstract = {Background: Reaching out to professional software developers is a crucial part of empirical software engineering research. One important method to investigate the state of practice is survey research. As drawing a random sample of professional software developers for a survey is rarely possible, researchers rely on various sampling strategies. Objective: In this paper, we report on our experience with different sampling strategies we employed, highlight ethical issues, and motivate the need to maintain a collection of key demographics about software developers to ease the assessment of the external validity of studies. Method: Our report is based on data from two studies we conducted in the past. Results: Contacting developers over public media proved to be the most effective and efficient sampling strategy. However, we not only describe the perspective of researchers who are interested in reaching goals like a large number of participants or a high response rate, but we also shed light onto ethical implications of different sampling strategies. We present one specific ethical guideline and point to debates in other research communities to start a discussion in the software engineering research community about which sampling strategies should be considered ethical.},
booktitle = {ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
articleno = {52},
numpages = {6},
keywords = {Ethics, Sampling, Software Developers, Empirical Research},
series = {ESEM'16}
}

@inproceedings{10.1145/3379597.3387462,
author = {Gold, Nicolas E. and Krinke, Jens},
title = {Ethical Mining: A Case Study on MSR Mining Challenges},
year = {2020},
isbn = {9781450375177},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3379597.3387462},
doi = {10.1145/3379597.3387462},
abstract = {Research in Mining Software Repositories (MSR) is research involving human subjects, as the repositories usually contain data about developers' interactions with the repositories. Therefore, any research in the area needs to consider the ethics implications of the intended activity before starting. This paper presents a discussion of the ethics implications of MSR research, using the mining challenges from the years 2010 to 2019 as a case study to identify the kinds of data used. It highlights problems that one may encounter in creating such datasets, and discusses ethics challenges that may be encountered when using existing datasets, based on a contemporary research ethics framework. We suggest that the MSR community should increase awareness of ethics issues by openly discussing ethics considerations in published articles.},
booktitle = {International Conference on Mining Software Repositories},
pages = {265–276},
numpages = {12},
keywords = {research ethics, mining software repositories},
series = {MSR'20}
}


@INPROCEEDINGS{8812041,  
author={Akond Rahman and Chris Parnin and Laurie Williams},  
booktitle={IEEE/ACM International Conference on Software Engineering},   
title={The Seven Sins: Security Smells in Infrastructure as Code Scripts},   
year={2019},  
volume={},  
number={},  
pages={164-175},
series={ICSE'19},
doi={10.1109/ICSE.2019.00033}
}

@misc{monperrus2018humancompetitive,
    title={Human-competitive Patches in Automatic Program Repair with Repairnator},
    author={Martin Monperrus and Simon Urli and Thomas Durieux and Matias Martinez and Benoit Baudry and Lionel Seinturier},
    year={2018},
    eprint={1810.05806},
    archivePrefix={arXiv},
    primaryClass={cs.SE}
}

@INPROCEEDINGS{8919181,
  author={Michele Guerriero and Martin Garriga and Damian A. Tamburri and Fabio Palomba},
  booktitle={IEEE International Conference on Software Maintenance and Evolution}, 
  title={Adoption, Support, and Challenges of Infrastructure-as-Code: Insights from Industry}, 
  year={2019},
  volume={},
  number={},
  pages={580-589},
  series={ICSME'29},
  doi={10.1109/ICSME.2019.00092}
 }

@INPROCEEDINGS{6606613,
  author={Brittany Johnson and Yoonki Song and Emerson Murphy-Hill and Robert Bowdidge},
  booktitle={International Conference on Software Engineering}, 
  title={Why don't software developers use static analysis tools to find bugs?}, 
  year={2013},
  volume={},
  number={},
  pages={672-681},
  series={ICSE'13},
  doi={10.1109/ICSE.2013.6606613}
  }

@article{tymchuk2017false,
  title={The False False Positives of Static Analysis},
  author={Tymchuk, Yuriy},
  year={2017}
}

@INPROCEEDINGS{7781843,
  author={Carlo Dimastrogiovanni and Nuno Laranjeiro},
  booktitle={Latin-American Symposium on Dependable Computing}, 
  title={Towards Understanding the Value of False Positives in Static Code Analysis}, 
  year={2016},
  volume={},
  number={},
  pages={119-122},
  series={LADC'16},
  doi={10.1109/LADC.2016.25}
  }

@article{10.1145/1646353.1646374,
author = {Bessey, Al and Block, Ken and Chelf, Ben and Chou, Andy and Fulton, Bryan and Hallem, Seth and Henri-Gros, Charles and Kamsky, Asya and McPeak, Scott and Engler, Dawson},
title = {A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World},
year = {2010},
issue_date = {February 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {2},
issn = {0001-0782},
url = {https://doi.org/10.1145/1646353.1646374},
doi = {10.1145/1646353.1646374},
abstract = {How Coverity built a bug-finding tool, and a business, around the unlimited supply of bugs in software systems.},
journal = {Commun. ACM},
month = feb,
pages = {66–75},
numpages = {10}
}

@article{mchugh2012interrater,
  title={Interrater Reliability: the Kappa Statistic},
  author={McHugh, Mary L},
  journal={Biochemia medica: Biochemia medica},
  volume={22},
  number={3},
  pages={276--282},
  year={2012},
  publisher={Medicinska naklada}
}

@article{dalla2020towards,
  title={Towards a catalogue of software quality metrics for infrastructure code},
  author={Dalla Palma, Stefano and Di Nucci, Dario and Palomba, Fabio and Tamburri, Damian Andrew},
  journal={Journal of Systems and Software},
  pages={110726},
  year={2020},
  publisher={Elsevier},
  doi={10.1016/j.jss.2020.110726}
}

@inproceedings{rahman2018characterizing,
  title={Characterizing Defective Configuration Scripts Used for Continuous Deployment},
  author={Rahman, Akond and Williams, Laurie},
  booktitle={IEEE International Conference on Software Testing, Verification and Validation},
  pages={34--45},
  year={2018},
  organization={IEEE},
  series={ICST'18},
  doi={10.1109/ICST.2018.00014}
}

@INPROCEEDINGS{7180066,
  author={Yujuan Jiang and Bram Adams},
  booktitle={IEEE/ACM Working Conference on Mining Software Repositories}, 
  title={Co-evolution of Infrastructure and Source Code - An Empirical Study}, 
  year={2015},
  volume={},
  number={},
  pages={45-55},
  series={MSR'15},
  doi={10.1109/MSR.2015.12}
  }

@inproceedings{van2018good,
  title={How good is your puppet? An empirically defined and validated quality model for puppet},
  author={Van der Bent, Eduard and Hage, Jurriaan and Visser, Joost and Gousios, Georgios},
  booktitle={International Conference on Software Analysis, Evolution and Reengineering},
  pages={164--174},
  year={2018},
  organization={IEEE},
  series={SANER'20},
  doi={10.1109/SANER.2018.8330206}
}

@inproceedings{carvalho2020c,
  title={C-3PR: A Bot for Fixing Static Analysis Violations via Pull Requests},
  author={Carvalho, Ant{\^o}nio and Luz, Welder and Marc{\'\i}lio, Diego and Bonif{\'a}cio, Rodrigo and Pinto, Gustavo and Canedo, Edna Dias},
  booktitle={IEEE International Conference on Software Analysis, Evolution and Reengineering},
  pages={161--171},
  year={2020},
  organization={IEEE},
  doi={10.1109/SANER48275.2020.9054842},
  series={SANER'20}
}

@article{cohen1960coefficient,
  title={A coefficient of agreement for nominal scales},
  author={Cohen, Jacob},
  journal={Educational and psychological measurement},
  volume={20},
  number={1},
  pages={37--46},
  year={1960},
  publisher={Sage Publications Sage CA: Thousand Oaks, CA},
  doi={10.1177/001316446002000104}
}

@article{10.1145/3408897,
author = {Rahman, Akond and Rahman, Md Rayhanur and Parnin, Chris and Williams, Laurie},
title = {Security Smells in Ansible and Chef Scripts: A Replication Study},
year = {2021},
issue_date = {January 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {30},
number = {1},
issn = {1049-331X},
url = {https://doi.org/10.1145/3408897},
doi = {10.1145/3408897},
abstract = {Context: Security smells are recurring coding patterns that are indicative of security weakness and require further inspection. As infrastructure as code (IaC) scripts, such as Ansible and Chef scripts, are used to provision cloud-based servers and systems at scale, security smells in IaC scripts could be used to enable malicious users to exploit vulnerabilities in the provisioned systems. Goal: The goal of this article is to help practitioners avoid insecure coding practices while developing infrastructure as code scripts through an empirical study of security smells in Ansible and Chef scripts. Methodology: We conduct a replication study where we apply qualitative analysis with 1,956 IaC scripts to identify security smells for IaC scripts written in two languages: Ansible and Chef. We construct a static analysis tool called Security Linter for Ansible and Chef scripts (SLAC) to automatically identify security smells in 50,323 scripts collected from 813 open source software repositories. We also submit bug reports for 1,000 randomly selected smell occurrences. Results: We identify two security smells not reported in prior work: missing default in case statement and no integrity check. By applying SLAC we identify 46,600 occurrences of security smells that include 7,849 hard-coded passwords. We observe agreement for 65 of the responded 94 bug reports, which suggests the relevance of security smells for Ansible and Chef scripts amongst practitioners. Conclusion: We observe security smells to be prevalent in Ansible and Chef scripts, similarly to that of the Puppet scripts. We recommend practitioners to rigorously inspect the presence of the identified security smells in Ansible and Chef scripts using (i) code review, and (ii) static analysis tools.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = {Jan.},
articleno = {3},
numpages = {31},
keywords = {devsecops, static analysis, empirical study, Ansible, chef, configuration scripts, insecure coding, infrastructure as code, configuration as code, devops, smell, security}
}


@INPROCEEDINGS{8622456,
  author={Foteini Cheirdari and George Karabatis},
  booktitle={IEEE International Conference on Big Data}, 
  title={Analyzing False Positive Source Code Vulnerabilities Using Static Analysis Tools}, 
  year={2018},
  volume={},
  number={},
  pages={4782-4788},
  series={Big Data'18},
  doi={10.1109/BigData.2018.8622456}
  }


@INPROCEEDINGS{8530713,  
author={M. {Harman} and P. {O'Hearn}},  
booktitle={IEEE International Working Conference on Source Code Analysis and Manipulation},   
title={From Start-ups to Scale-ups: Opportunities and Open Problems for Static and Dynamic Program Analysis},   
year={2018},  
volume={},  
number={},  
pages={1-23},
series={SCAM'18},
doi={10.1109/SCAM.2018.00009}
}

@article{feinstein1990high,
  title={High agreement but low kappa: I. The problems of two paradoxes},
  author={Feinstein, Alvan R and Cicchetti, Domenic V},
  journal={Journal of clinical epidemiology},
  volume={43},
  number={6},
  pages={543--549},
  year={1990},
  publisher={Elsevier}
}

@article{46576,
author = {Sadowski, Caitlin and Aftandilian, Edward and Eagle, Alex and Miller-Cushon, Liam and Jaspan, Ciera},
title = {Lessons from Building Static Analysis Tools at Google},
year = {2018},
issue_date = {April 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {61},
number = {4},
issn = {0001-0782},
url = {https://doi.org/10.1145/3188720},
doi = {10.1145/3188720},
abstract = {For a static analysis project to succeed, developers must feel they benefit from and enjoy using it.},
journal = {Commun. ACM},
month = {Mar.},
pages = {58–66},
numpages = {9}
}


@inproceedings{park2016battles,
  title={Battles with False Positives in Static Analysis of JavaScript Web Applications in the Wild},
  author={Park, Joonyoung and Lim, Inho and Ryu, Sukyoung},
  booktitle={IEEE/ACM International Conference on Software Engineering Companion},
  pages={61--70},
  year={2016},
  series={ICSE-C'16}
}

@inproceedings{muske2016survey,
  title={Survey of Approaches for Handling Static Analysis Alarms},
  author={Muske, Tukaram and Serebrenik, Alexander},
  booktitle={IEEE International Working Conference on Source Code Analysis and Manipulation},
  pages={157--166},
  year={2016},
  organization={IEEE},
  series={SCAM'16},
  doi={10.1109/SCAM.2016.25}
}

@inproceedings{gauthier2018scalable,
  title={Scalable Static Analysis to Detect Security Vulnerabilities: Challenges and Solutions},
  author={Gauthier, Fran{\c{c}}ois and Keynes, Nathan and Allen, Nicholas and Corney, Diane and Krishnan, Padmanabhan},
  booktitle={IEEE Cybersecurity Development},
  pages={134--134},
  year={2018},
  organization={IEEE},
  series={SecDev'18},
  doi={10.1109/SecDev.2018.00030}
}

@inproceedings{landman2017challenges,
  title={Challenges for Static Analysis of Java Reflection - Literature Review and Empirical Study},
  author={Landman, Davy and Serebrenik, Alexander and Vinju, Jurgen J},
  booktitle={IEEE/ACM International Conference on Software Engineering},
  pages={507--518},
  year={2017},
  series={ICSE'17},
  doi={10.1109/ICSE.2017.53}
}

@inproceedings{christakis2016developers,
  title={What Developers Want and Need from Program Analysis: An Empirical Study},
  author={Christakis, Maria and Bird, Christian},
  booktitle={IEEE/ACM International Conference on Automated Software Engineering},
  pages={332--343},
  year={2016},
  series={ASE'16},
  doi={10.1145/2970276.2970347}
}

@article{vassallo2020developers,
  title={How Developers Engage with Static Analysis Tools in Different Contexts},
  author={Vassallo, Carmine and Panichella, Sebastiano and Palomba, Fabio and Proksch, Sebastian and Gall, Harald C and Zaidman, Andy},
  journal={Empirical Software Engineering},
  volume={25},
  number={2},
  pages={1419--1457},
  year={2020},
  publisher={Springer},
  series={EMSE'20},
  doi={10.1007/s10664-019-09750-5}
}


@Misc{blogpost,
   title={How to calculate Password Strength...},
   year=2011,
   author={Thomas Hruska},
   note={\url{http://cubicspot.blogspot.com/2011/11/how-to-calculate-password-strength.html}}
}

@INPROCEEDINGS{9402108,  
author={Ferreira, Gabriel and Jia, Limin and Sunshine, Joshua and Kästner, Christian},  
booktitle={IEEE/ACM International Conference on Software Engineering},   
title={Containing Malicious Package Updates in npm with a Lightweight Permission System},   
year={2021},  
volume={},  
number={},  
pages={1334-1346},  
doi={10.1109/ICSE43902.2021.00121},
series={ICSE'21}
}

@inproceedings{arxiv.2201.05348,
  author = {Reid, Brittany and Wagner, Markus and d'Amorim, Marcelo and Treude, Christoph},  
  title = {Software Engineering User Study Recruitment on Prolific: An Experience Report},
  booktitle={International Workshop on Recruiting Participants for Empirical Software Engineering},
  year = {2022},
  series={RoPES'22}
}

@Misc{askanethcode,
   title={Ask an Ethicist: Vulnerability Disclosure},
   year=2022,
   note={\url{https://ethics.acm.org/integrity-project/ask-an-ethicist/ask-an-ethicist-vulnerability-disclosure/}}
}

@Misc{github-cvd,
   title={Coordinated vulnerability disclosure (CVD) for open source projects},
   year=2022,
   note={\url{https://github.blog/2022-02-09-coordinated-vulnerability-disclosure-cvd-open-source-projects/}}
}

@misc{fulldisc.2005,  
  url = {https://courses.cs.washington.edu/courses/csep590/05au/whitepaper_turnin/software_vulnerabilities_by_cencini_yu_chan.pdf},
  author = {Cencini, Andrew and Yu, Kevin and Chan, Tony},
  title = {Software Vulnerabilities: Full-, Responsible-, and Non-Disclosure},
  year = {2005}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CHAPTER 6
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@ARTICLE{2019arXiv190110220B,
       author = {{Berger}, Emery D. and {Hollenbeck}, Celeste and {Maj}, Petr and
        {Vitek}, Olga and {Vitek}, Jan},
        title = {On the Impact of Programming Languages on Code Quality},
      journal = {arXiv e-prints},
     keywords = {Computer Science - Software Engineering},
         year = {2019},
        month = {1},
          eid = {arXiv:1901.10220},
        pages = {arXiv:1901.10220},
archivePrefix = {arXiv},
       eprint = {1901.10220},
}

@book{IEEEComputerSociety:2014:GSE:2616205,
 author = {IEEE Computer Society and Bourque, Pierre and Fairley, Richard E.},
 title = {Guide to the Software Engineering Body of Knowledge (SWEBOK(R)): Version 3.0},
 year = {2014},
 isbn = {0769551661, 9780769551661},
 edition = {3rd},
 publisher = {IEEE Computer Society Press},
 address = {Los Alamitos, CA, USA},
}

@INPROCEEDINGS{4335232, 
author={I. {Heitlager} and T. {Kuipers} and J. {Visser}}, 
booktitle={6th International Conference on the Quality of Information and Communications Technology (QUATIC 2007)}, 
title={A Practical Model for Measuring Maintainability}, 
year={2007}, 
volume={}, 
number={}, 
pages={30-39}, 
keywords={software maintenance;software quality;practical model;maintainability measurement;software system;technical quality;source code;ISO 9126 model;software product quality;maintainability index;IT management consultancy activities;Software quality;Software maintenance;ISO standards;Communication system software;Software systems;Software testing;IEC standards;Software standards;Communications technology;Software measurement}, 
doi={10.1109/QUATIC.2007.8}, 
ISSN={}, 
month={Sep.}}

@article{slaughter1998evaluating,
  title={Evaluating the cost of software quality},
  author={Slaughter, Sandra A and Harter, Donald E and Krishnan, Mayuram S},
  journal={Communications of the ACM},
  volume={41},
  number={8},
  pages={67--73},
  year={1998}
}

@article{doi:10.1080/00031305.2016.1154108,
author = {Ronald L. Wasserstein and Nicole A. Lazar},
title = {The ASA's Statement on p-Values: Context, Process, and Purpose},
journal = {The American Statistician},
volume = {70},
number = {2},
pages = {129-133},
year  = {2016},
publisher = {Taylor & Francis},
doi = {10.1080/00031305.2016.1154108}
}

@article{cliff:1993,
author = {Cliff, Norman},
year = {1993},
month = {11},
pages = {494-509},
title = {Dominance Statistics: Ordinal Analyses to Answer Ordinal Questions},
volume = {114},
journal = {Psychological Bulletin},
doi = {10.1037/0033-2909.114.3.494}
}


@inproceedings{Ray:2014:LSS:2635868.2635922,
 author = {Ray, Baishakhi and Posnett, Daryl and Filkov, Vladimir and Devanbu, Premkumar},
 title = {A Large Scale Study of Programming Languages and Code Quality in {Github}},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {155--165},
 numpages = {11},
 doi = {10.1145/2635868.2635922},
 acmid = {2635922},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {bug fix, code quality, empirical research, programming language, regression analysis, software domain, type system},
}

@article{Ray:2017:LSP:3144574.3126905,
 author = {Ray, Baishakhi and Posnett, Daryl and Devanbu, Premkumar and Filkov, Vladimir},
 title = {A Large-scale Study of Programming Languages and Code Quality in GitHub},
 journal = {Commun. ACM},
 issue_date = {October 2017},
 volume = {60},
 number = {10},
 month = sep,
 year = {2017},
 issn = {0001-0782},
 pages = {91--100},
 numpages = {10},
 doi = {10.1145/3126905},
 acmid = {3126905},
 publisher = {ACM},
 address = {New York, NY, USA},
}


@techreport{common:2009,
  title={Common methodology for information technology security evaluation},
  author={{Common Criteria Working Group}},
  year={2009},
  institution={Technical report, Common Criteria Interpretation Management Board}
}

@techreport{oswap:2009,
	author ={{The OWASP Foundation}},
	title       = {{OWASP} Application Security Verification Standard 2009 - Web
Application Standard},
	year        = {2009}
}

@INPROCEEDINGS{6616351,
author={H. Xu and J. Heijmans and J. Visser},
booktitle={2013 IEEE Seventh International Conference on Software Security and Reliability Companion},
title={A Practical Model for Rating Software Security},
year={2013},
volume={},
number={},
pages={231-232},
keywords={ISO standards;security of data;software quality;software standards;rating software security;ISO 25010 standard;software product quality;security quality model;Software;ISO standards;Data models;Quality assessment;Product design;Authentication;Software security;security model;software product quality},
doi={10.1109/SERE-C.2013.11},
ISSN={},
month={June},}


@article{Reis:2017:IJSSE,
 author = {Reis, Sofia and Abreu, Rui},
 title = {A Database of Existing Vulnerabilities to Enable Controlled Testing Studies},
 journal = {International Journal of Secure Software Engineering (IJSSE)},
 issue_date = {2017},
 volume = {8},
 number = {3},
 year = {2017},
 numpages = {1-23},
 doi = {10.4018/IJSSE.2017070101},
 acmid = {1330021},
 publisher = {IGI Global}
 }

 @inproceedings{just2014mutants,
   title={Are mutants a valid substitute for real faults in software testing?},
   author={Just, Ren{\'e} and Jalali, Darioush and Inozemtseva, Laura and Ernst, Michael D and Holmes, Reid and Fraser, Gordon},
   booktitle={Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
   pages={654--665},
   year={2014},
   organization={ACM}
 }

 @INPROCEEDINGS{7816479,
 author={H. Borges and A. Hora and M. T. Valente},
 booktitle={2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
 title={Understanding the Factors That Impact the Popularity of GitHub Repositories},
 year={2016},
 volume={},
 number={},
 pages={334-344},
 keywords={public domain software;software reviews;source code (software);time series;GitHub Repositories;open source developers;software acceptance;software system popularity;open source software;stargazers button;GitHub projects;programming language;project popularity;time series;software market;Software;Libraries;Organizations;Documentation;HTML;Java;GitHub;Software Popularity;Open Source software;Social coding},
 doi={10.1109/ICSME.2016.31},
 ISSN={},
 month={Oct},}

 @INPROCEEDINGS{7476680,
 author={I. Kádár and P. Hegedus and R. Ferenc and T. Gyimóthy},
 booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
 title={A Code Refactoring Dataset and Its Assessment Regarding Software Maintainability},
 year={2016},
 volume={1},
 number={},
 pages={599-603},
 keywords={public domain software;software maintenance;software metrics;software reliability;source code (software);code refactoring dataset processing;excessive open dataset;source code metrics;open-source systems;quality attributes;source code classes;clone metrics;software maintainability;Measurement;Cloning;Open source software;Correlation;Java;Complexity theory;code refactoring;software maintainability;empirical study},
 doi={10.1109/SANER.2016.42},
 ISSN={},
 month={March},}


 @ARTICLE{Anda:2013,
 author = {B. C. Anda and A. Yamashita and D. I. Sjoberg and A. Mockus and T. Dyba},
 journal = {IEEE Transactions on Software Engineering},
 title = {Quantifying the Effect of Code Smells on Maintenance Effort},
 year = {2013},
 volume = {39},
 number = {},
 pages = {1144-1156},
 keywords={Maintenance engineering;Java;Software;Surgery;Time measurement;Context;Electronic mail;code churn;Maintainability;object-oriented design;product metrics},
 doi = {10.1109/TSE.2012.89},
 url = {doi.ieeecomputersociety.org/10.1109/TSE.2012.89},
 ISSN = {0098-5589},
 month={08}
 }

 @INPROCEEDINGS{6311252,
 author={T. Oh and B. Stackpole and E. Cummins and C. Gonzalez and R. Ramachandran and Shinyoung Lim},
 booktitle={2012 The First IEEE Workshop on Enabling Technologies for Smartphone and Internet of Things (ETSIoT)},
 title={Best security practices for android, blackberry, and iOS},
 year={2012},
 volume={},
 number={},
 pages={42-47},
 keywords={mobile computing;operating systems (computers);security of data;smart phones;security practices;Android;BlackBerry;iOS;mobile operating systems;smartphones;security vulnerabilities;unauthorized access;loss of confidentiality;loss of information;Security;Operating systems;Best practices;Smart phones;Google;Mobile communication;Bluetooth;best practices;mobile devices;Android;BlackBerry;iOS;security;mobile operating systems},
 doi={10.1109/ETSIoT.2012.6311252},
 ISSN={},
 month={June},}

 @article{MESQUIDA201519,
 title = "Implementing information security best practices on software lifecycle processes: The ISO/IEC 15504 Security Extension",
 journal = "Computers \& Security",
 volume = "48",
 pages = "19 - 34",
 year = "2015",
 issn = "0167-4048",
 doi = "https://doi.org/10.1016/j.cose.2014.09.003",
 author = "Antoni Lluís Mesquida and Antonia Mas",
 keywords = "ISO/IEC 27002, Information security management systems, ISO/IEC 15504 (SPICE), Security extension, Software process improvement (SPI)",
 abstract = "The ISO/IEC 15504 international standard can be aligned with the ISO/IEC 27000 information security management framework. During the research conducted all the existing relations between ISO/IEC 15504-5 software development base practices and ISO/IEC 27002 security controls have been analysed and the ISO/IEC 15504 Security Extension has been developed. This extension details the changes that software companies should make in the software lifecycle processes for the successful implementation of the related security controls. To attain our research objectives, we evaluate the ISO/IEC 15504 Security Extension through case studies in a sample of software development organizations. This study follows the design science research paradigm that is based on constructive research."
 }
 @ARTICLE{5287006,
 author={M. P. Robillard},
 journal={IEEE Software},
 title={What Makes APIs Hard to Learn? Answers from Developers},
 year={2009},
 volume={26},
 number={6},
 pages={27-34},
 keywords={application program interfaces;software development management;software reusability;application program interface;software development technologies;code reuse;API learnability;API usability;Microsoft developers;Programming profession;Usability;Application software;API usability;software documentation;code examples;API design;empirical study},
 doi={10.1109/MS.2009.193},
 ISSN={0740-7459},
 month={Nov},}

 @ARTICLE{7676144,
 author={M. Green and M. Smith},
 journal={IEEE Security Privacy},
 title={Developers are Not the Enemy!: The Need for Usable Security APIs},
 year={2016},
 volume={14},
 number={5},
 pages={40-46},
 keywords={application program interfaces;security of data;software engineering;cryptographic API;software engineering;IT security;Software engineering;Cryptography;Privacy;Computer security;User centered design;APIs;usability;end users;cryptographic controls;usability testing;software;software engineering;privacy;security},
 doi={10.1109/MSP.2016.111},
 ISSN={1540-7993},
 month={Sep.},}
 
 @article{Bijlsma:2012:FIR:2317098.2317124,
  author = {Bijlsma, Dennis and Ferreira, Miguel Alexandre and Luijten, Bart and Visser, Joost},
  title = {Faster Issue Resolution with Higher Technical Quality of Software},
  journal = {Software Quality Journal},
  issue_date = {June      2012},
  volume = {20},
  number = {2},
  month = jun,
  year = {2012},
  issn = {0963-9314},
  pages = {265--285},
  numpages = {21},
  url = {http://dx.doi.org/10.1007/s11219-011-9140-0},
  doi = {10.1007/s11219-011-9140-0},
  acmid = {2317124},
  publisher = {Kluwer Academic Publishers},
  address = {Hingham, MA, USA},
  keywords = {Defect resolution, Issue tracker mining, Maintainability, Rank correlation, Software defects, Source code metrics},
 }

 @INPROCEEDINGS{4724577,
 author={K. Maruyama and K. Tokoda},
 booktitle={2008 15th Asia-Pacific Software Engineering Conference},
 title={Security-Aware Refactoring Alerting its Impact on Code Vulnerabilities},
 year={2008},
 volume={},
 number={},
 pages={445-452},
 keywords={security of data;software maintenance;security-aware refactoring alerting;code vulnerabilities;recurring modifications;software vulnerable;Programming profession;Java;Software maintenance;Data security;Information security;Software systems;Software prototyping;Prototypes;Software safety;Collaborative software;Refactoring;source code changes;softwaation flow;access control;integrated development environmentsre maintenance;software security;inform},
 doi={10.1109/APSEC.2008.57},
 ISSN={1530-1362},
 month={Dec},}

 @article{Palomba:2018:DIM:3231288.3231337,
  author = {Palomba, Fabio and Bavota, Gabriele and Penta, Massimiliano Di and Fasano, Fausto and Oliveto, Rocco and Lucia, Andrea De},
  title = {On the Diffuseness and the Impact on Maintainability of Code Smells: A Large Scale Empirical Investigation},
  journal = {Empirical Softw. Engg.},
  issue_date = {June      2018},
  volume = {23},
  number = {3},
  month = jun,
  year = {2018},
  issn = {1382-3256},
  pages = {1188--1221},
  numpages = {34},
  doi = {10.1007/s10664-017-9535-z},
  acmid = {3231337},
  publisher = {Kluwer Academic Publishers},
  address = {Norwell, MA, USA},
  keywords = {Code smells, Empirical studies, Mining software repositories},
 }

 @INPROCEEDINGS{1167822,
 author={Y. Kataoka and T. Imai and H. Andou and T. Fukaya},
 booktitle={International Conference on Software Maintenance, 2002. Proceedings.},
 title={A quantitative evaluation of maintainability enhancement by refactoring},
 year={2002},
 volume={},
 number={},
 pages={576-585},
 keywords={software maintenance;software metrics;program refactoring;maintainability enhancement;quantitative evaluation;coupling metrics;Software maintenance;Programming profession;Process planning;Maintenance engineering;Systems engineering and theory;Laboratories;Software design;Computer bugs;Performance analysis;Project management},
 doi={10.1109/ICSM.2002.1167822},
 ISSN={1063-6773},
 month={Oct},}


 @ARTICLE{7927935,
 author={S. Lal and T. Taleb and A. Dutta},
 journal={IEEE Communications Magazine},
 title={NFV: Security Threats and Best Practices},
 year={2017},
 volume={55},
 number={8},
 pages={211-217},
 keywords={mobile radio;telecommunication security;virtualisation;security threats;network function virtualization;telco hardware functionalities;software platform;security flaws;virtual mobile networks;mitigation techniques;NFV infrastructure;Computer security;Virtual machine monitors;Virtualization;Network function virtualization;Computer crime;Mobile computing},
 doi={10.1109/MCOM.2017.1600899},
 ISSN={0163-6804},
 month={Aug},}
 
 @inproceedings{10.1145/1985362.1985366,
 author = {Zazworka, Nico and Shaw, Michele A. and Shull, Forrest and Seaman, Carolyn},
 title = {Investigating the Impact of Design Debt on Software Quality},
 year = {2011},
 isbn = {9781450305860},
 publisher = {Association for Computing Machinery},
 address = {New York, NY, USA},
 url = {https://doi.org/10.1145/1985362.1985366},
 doi = {10.1145/1985362.1985366},
 booktitle = {Proceedings of the 2nd Workshop on Managing Technical Debt},
 pages = {17–23},
 numpages = {7},
 keywords = {code smells, refactoring, god class, technical debt, maintainability, design debt},
 location = {Waikiki, Honolulu, HI, USA},
 series = {MTD ’11}
 }
  
 

 @inproceedings{Fry:2012:HSP:2338965.2336775,
  author = {Fry, Zachary P. and Landau, Bryan and Weimer, Westley},
  title = {A Human Study of Patch Maintainability},
  booktitle = {Proceedings of the 2012 International Symposium on Software Testing and Analysis},
  series = {ISSTA 2012},
  year = {2012},
  isbn = {978-1-4503-1454-1},
  location = {Minneapolis, MN, USA},
  pages = {177--187},
  numpages = {11},
  url = {http://doi.acm.org/10.1145/2338965.2336775},
  doi = {10.1145/2338965.2336775},
  acmid = {2336775},
  publisher = {ACM},
  address = {New York, NY, USA},
 }

 @article{KARUS20111161,
 title = "Predicting the maintainability of XSL transformations",
 journal = "Science of Computer Programming",
 volume = "76",
 number = "12",
 pages = "1161 - 1176",
 year = "2011",
 note = "Special Issue on Software Evolution, Adaptability and Variability",
 issn = "0167-6423",
 doi = "https://doi.org/10.1016/j.scico.2010.12.006",
 url = "http://www.sciencedirect.com/science/article/pii/S0167642310002315",
 author = "Siim Karus and Marlon Dumas",
 keywords = "Software maintenance, XML, XSLT, Software metrics",
 abstract = "XSLT is a popular language for implementing both presentation templates in Web applications as well as document and message converters in enterprise applications. The widespread adoption and popularity of XSLT raises the challenge of efficiently managing the evolution of significant amounts of XSLT code. This challenge calls for guidelines and tool support for developing maintainable XSLT code. In this setting, this paper addresses the following question: Can the maintainability of XSL transformations, measured in terms of code churn in the next revision of a transformation, be predicted using a combination of simple metrics? This question is studied using a dataset extracted from open-source software project repositories. An outcome of this empirical study is a set of statistical models for predicting the maintainability of XSL transformations with relatively high accuracy. In addition, by analyzing the major influencers of code churn in these models, the paper identifies guidelines for designing XSL transformations with reduced future churn."
 }
 
 @ARTICLE{4267025, author={R. {Telang} and S. {Wattal}}, journal={IEEE Transactions on Software Engineering}, title={An Empirical Analysis of the Impact of Software Vulnerability Announcements on Firm Stock Price}, year={2007}, volume={33}, number={8}, pages={544-557},}
 
 @INPROCEEDINGS{8785997,
   author={M. {di Biase} and A. {Rastogi} and M. {Bruntink} and A. {van Deursen}},
   booktitle={2019 IEEE/ACM International Conference on Technical Debt (TechDebt)}, 
   title={The Delta Maintainability Model: Measuring Maintainability of Fine-Grained Code Changes}, 
   year={2019},
   volume={},
   number={},
   pages={113-122},}

 @INPROCEEDINGS{4493325,
 author={F. Khomh and Y. Gueheneuce},
 booktitle={2008 12th European Conference on Software Maintenance and Reengineering},
 title={Do Design Patterns Impact Software Quality Positively?},
 year={2008},
 volume={},
 number={},
 pages={274-278},
 keywords={object-oriented programming;software maintenance;software quality;design patterns;software quality;software maintenance;software evolution;Software design;Software quality;Software maintenance;Concrete;Best practices;Impedance;Design engineering;Performance evaluation;Production facilities;Software systems},
 doi={10.1109/CSMR.2008.4493325},
 ISSN={1534-5351},
 month={April},}

@inproceedings{10.1145/1774088.1774504,
author = {Chowdhury, Istehad and Zulkernine, Mohammad},
title = {Can Complexity, Coupling, and Cohesion Metrics Be Used as Early Indicators of Vulnerabilities?},
year = {2010},
isbn = {9781605586397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1774088.1774504},
doi = {10.1145/1774088.1774504},
abstract = {It is difficult to detect vulnerabilities until they manifest themselves as security failures in the operational stage of software, because the security concerns are not addressed or known sufficiently early during software development. Complexity, coupling, and cohesion (CCC) related software metrics can be measured during the earlier phases of software development. If empirical relationships can be discovered between CCC metrics and vulnerabilities, these metrics could aid software developers to take proactive actions against potential vulnerabilities in software. In this paper, we conduct an extensive case study on Mozilla Firefox to provide empirical evidence on how vulnerabilities are related to complexity, coupling, and cohesion. We find that CCC metrics are correlated to vulnerabilities at a statistically significant level. We further examine the correlations to determine which level (design or code) of CCC metrics are better indicators of vulnerabilities. We also observe that the correlation patterns are stable across multiple releases of the software. These observations show that CCC metrics can be dependably used as early indicators of vulnerabilities in software.},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
pages = {1963–1969},
numpages = {7},
keywords = {software security, empirical study, complexity, software metrics, vulnerability, cohesion, coupling, security},
location = {Sierre, Switzerland},
series = {SAC '10}
}

 @InProceedings{10.1007/978-3-642-35267-6-18,
 author="Heged{\H{u}}s, P{\'e}ter
 and B{\'a}n, D{\'e}nes
 and Ferenc, Rudolf
 and Gyim{\'o}thy, Tibor",
 title="Myth or Reality? Analyzing the Effect of Design Patterns on Software Maintainability",
 booktitle="Computer Applications for Software Engineering, Disaster Recovery, and Business Continuity",
 year="2012",
 publisher="Springer Berlin Heidelberg",
 address="Berlin, Heidelberg",
 pages="138--145",
 abstract="Although the belief of utilizing design patterns to create better quality software is fairly widespread, there is relatively little research objectively indicating that their usage is indeed beneficial.",
 isbn="978-3-642-35267-6"
 }
 
 @INPROCEEDINGS{5773403, author={M. F. {Zibran} and R. K. {Saha} and M. {Asaduzzaman} and C. K. {Roy}}, booktitle={2011 16th IEEE International Conference on Engineering of Complex Computer Systems}, title={Analyzing and Forecasting Near-Miss Clones in Evolving Software: An Empirical Study}, year={2011}, volume={}, number={}, pages={295-304},}
 
 
 @misc{criteria:2017,
 author={J. Visser},
 title={SIG/TÜViT evaluation criteria trusted product
 maintainability: Guidance for producers},
 year={2018},
 booktitle={Software Improvement Group},
 month={February},
 HOWPUBLISHED = "Available: \url{https://bit.ly/2H8QZBo}" 
 }

@INPROCEEDINGS{7809586, 
author={T. {Döhmen} and M. {Bruntink} and D. {Ceolin} and J. {Visser}}, 
booktitle={2016 Joint Conference of the International Workshop on Software Measurement and the International Conference on Software Process and Product Measurement (IWSM-MENSURA)}, 
title={Towards a Benchmark for the Maintainability Evolution of Industrial Software Systems}, 
year={2016}, 
volume={}, 
number={}, 
pages={11-21}, 
keywords={organisational aspects;software maintenance;maintainability evolution;industrial software systems;cost factor;software maintenance costs;IT budgets;software improvement;replacement strategies;software volume;benchmark dataset;Benchmark testing;Software systems;Complexity theory;Software measurement;Industries;Electronic mail;software evolution;maintainability;benchmarking}, 
doi={10.1109/IWSM-Mensura.2016.014}, 
ISSN={}, 
month={Oct},}

@book{schneier2006beyond,
  title={Beyond fear: Thinking sensibly about security in an uncertain world},
  author={Schneier, Bruce},
  year={2006},
  publisher={Springer Science \& Business Media}
}

@INPROCEEDINGS{7194582, 
author={K. {Yskout} and R. {Scandariato} and W. {Joosen}}, 
booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering}, 
title={Do Security Patterns Really Help Designers?}, 
year={2015}, 
volume={1}, 
number={}, 
pages={292-302}, 
keywords={security of data;software architecture;security pattern;software design;software architecture;realistically-sized banking system;Security;Banking;Training;IEEE catalogs;Software;Context;Productivity}, 
doi={10.1109/ICSE.2015.49}, 
ISSN={0270-5257}, 
month={May},}

@INPROCEEDINGS{8077802, 
author={Y. {Acar} and C. {Stransky} and D. {Wermke} and C. {Weir} and M. L. {Mazurek} and S. {Fahl}}, 
booktitle={2017 IEEE Cybersecurity Development (SecDev)}, 
title={Developers Need Support, Too: A Survey of Security Advice for Software Developers}, 
year={2017}, 
volume={}, 
number={}, 
pages={22-26}, 
keywords={program debugging;security of data;software engineering;source code (software);security advice;software developers;software security;code security;secure-programming problems;security bugs;guidance ecosystem;Organizations;Software;Encoding;Google;Guidelines;Cryptography}, 
doi={10.1109/SecDev.2017.17}, 
ISSN={}, 
month={Sep.},}

@inproceedings{Pothamsetty:2005:SEL:1107622.1107635,
 author = {Pothamsetty, Venkat},
 title = {Where Security Education is Lacking},
 booktitle = {Proceedings of the 2Nd Annual Conference on Information Security Curriculum Development},
 series = {InfoSecCD '05},
 year = {2005},
 isbn = {1-59593-261-5},
 location = {Kennesaw, Georgia},
 pages = {54--58},
 numpages = {5},
 url = {http://doi.acm.org/10.1145/1107622.1107635},
 doi = {10.1145/1107622.1107635},
 acmid = {1107635},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {security education, security engineering, security jobs, software engineering courses and curricula},
} 

@article{mcgraw2004software,
  title={Software security},
  author={McGraw, Gary},
  journal={IEEE Security \& Privacy},
  volume={2},
  number={2},
  pages={80--83},
  year={2004},
  publisher={IEEE}
}

 @INPROCEEDINGS{8530041,
 author={I. Malavolta and R. Verdecchia and B. Filipovic and M. Bruntink and P. Lago},
 booktitle={2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
 title={How Maintainability Issues of Android Apps Evolve},
 year={2018},
 volume={},
 number={},
 pages={334-344},
 keywords={Android (operating system);mobile computing;public domain software;software maintenance;maintainability issues;Google Play store;Android apps lifecycle;maintainability hotspots;GitHub repositories;Android developers;code refactoring sessions;code review sessions;code quality;Google;Tools;Market research;Planning;Open source software;Computer bugs;Maintainability;Android;Empirical study},
 doi={10.1109/ICSME.2018.00042},
 ISSN={2576-3148},
 month={Sep.},}
 
 @inproceedings{10.1145/2489828.2489830,
 author = {Nistor, Ligia and Kurilova, Darya and Balzer, Stephanie and Chung, Benjamin and Potanin, Alex and Aldrich, Jonathan},
 title = {Wyvern: A Simple, Typed, and Pure Object-Oriented Language},
 year = {2013},
 isbn = {9781450320467},
 publisher = {Association for Computing Machinery},
 address = {New York, NY, USA},
 url = {https://doi.org/10.1145/2489828.2489830},
 doi = {10.1145/2489828.2489830},
 abstract = {The simplest and purest practical object-oriented language designs today are seen in dynamically-typed languages, such as Smalltalk and Self. Static types, however, have potential benefits for productivity, security, and reasoning about programs. In this paper, we describe the design of Wyvern, a statically typed, pure object-oriented language that attempts to retain much of the simplicity and expressiveness of these iconic designs.Our goals lead us to combine pure object-oriented and functional abstractions in a simple, typed setting. We present a foundational object-based language that we believe to be as close as one can get to simple typed lambda calculus while keeping object-orientation. We show how this foundational language can be translated to the typed lambda calculus via standard encodings. We then define a simple extension to this language that introduces classes and show that classes are no more than sugar for the foundational object-based language. Our future intention is to demonstrate that modules and other object-oriented features can be added to our language as not more than such syntactical extensions while keeping the object-oriented core as pure as possible.The design of Wyvern closely follows both historical and modern ideas about the essence of object-orientation, suggesting a new way to think about a minimal, practical, typed core language for objects.},
 booktitle = {Proceedings of the 5th Workshop on MechAnisms for SPEcialization, Generalization and InHerItance},
 pages = {9–16},
 numpages = {8},
 keywords = {first-class classes, object-oriented, static type checking},
 location = {Montpellier, France},
 series = {MASPEGHI '13}
 }

@inproceedings{kurilova2014wyvern,
  title={Wyvern: Impacting software security via programming language design},
  author={Kurilova, Darya and Potanin, Alex and Aldrich, Jonathan},
  booktitle={Proceedings of the 5th Workshop on Evaluation and Usability of Programming Languages and Tools},
  pages={57--58},
  year={2014}
}

 @article{HEGEDUS2018313,
 title = "Empirical evaluation of software maintainability based on a manually validated refactoring dataset",
 journal = "Information and Software Technology",
 volume = "95",
 pages = "313 - 327",
 year = "2018",
 issn = "0950-5849",
 doi = "https://doi.org/10.1016/j.infsof.2017.11.012",
 author = "Péter Hegedűs and István Kádár and Rudolf Ferenc and Tibor Gyimóthy",
 keywords = "Code refactoring, Manually validated empirical dataset, Source code metrics, Software maintainability, Empirical study",
 abstract = "Context
 Refactoring is a technique for improving the internal structure of software systems. It has a solid theoretical background while being used in development practice also. However, we lack empirical research results on the real effect of code refactoring and its application.
 Objective
 This paper presents a manually validated subset of a previously published dataset containing the refactorings extracted by the RefFinder tool, code metrics, and maintainability of 7 open-source systems. We found that RefFinder had around 27% overall average precision on the subject systems, thus our manually validated subset has substantial added value. Using the dataset, we studied several aspects of the refactored and non-refactored source code elements (classes and methods), like the differences in their maintainability and source code metrics.
 Method
 We divided the source code elements into a group containing the refactored elements and a group with non-refactored elements. We analyzed the elements’ characteristics in these groups using correlation analysis, Mann–Whitney U test and effect size measures.
 Results
 Source code elements subjected to refactorings had significantly lower maintainability than elements not affected by refactorings. Moreover, refactored elements had significantly higher size related metrics, complexity, and coupling. Also these metrics changed more significantly in the refactored elements. The results are mostly in line with our previous findings on the not validated dataset, with the difference that clone metrics had no strong connection with refactoring.
 Conclusions
 Compared to the preliminary analysis using a not validated dataset, the manually validated dataset led to more significant results, which suggests that developers find targets for refactorings based on some internal quality properties of the source code, like their size, complexity or coupling, but not clone related metrics as reported in our previous studies. They do not just use these properties for identifying targets, but also control them with refactorings."
 }

 @ARTICLE{1702388,
 author={T. J. McCabe},
 journal={IEEE Transactions on Software Engineering},
 title={A Complexity Measure},
 year={1976},
 volume={SE-2},
 number={4},
 pages={308-320},
 keywords={Basis;complexity measure;control flow;decomposition;graph theory;independence;linear;modularization;programming;reduction;software;testing;Software testing;System testing;Graph theory;Fluid flow measurement;Software measurement;Linear programming;Software engineering;Software systems;Software maintenance;National security;Basis;complexity measure;control flow;decomposition;graph theory;independence;linear;modularization;programming;reduction;software;testing},
 doi={10.1109/TSE.1976.233837},
 ISSN={0098-5589},
 month={Dec}}
 
@INPROCEEDINGS{8819456, 
author={A. A. {Elkhail} and T. {Cerny}}, 
booktitle={2019 IEEE 5th Intl Conference on Big Data Security on Cloud (BigDataSecurity), IEEE Intl Conference on High Performance and Smart Computing, (HPSC) and IEEE Intl Conference on Intelligent Data and Security (IDS)}, 
title={On Relating Code Smells to Security Vulnerabilities}, 
year={2019}, volume={}, number={}, pages={7-12},}

 
@INPROCEEDINGS{7476787, author={M. R. {Islam} and M. F. {Zibran}}, booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)}, title={A Comparative Study on Vulnerabilities in Categories of Clones and Non-cloned Code}, year={2016}, volume={3}, number={}, pages={8-14},}

@book{iso:2011,
  title = {International Standard ISO/IEC 25010. Systems and Software Engineering - Systems and software Quality Requirements and Evaluation (SQuaRE) - System and Software Quality Models},
  author={{International Organization for Standardization}},
   year = {2011}
}

 @article{graw:1992,
   title={A common language effect size statistic. Psychological Bulletin},
   author={McGraw, Kenneth O. and Wong, S. P.},
   year={1992},
   doi={doi:10.1037/0033-2909.111.2.361}
 }
 
 @article{shin2010evaluating,
   title={Evaluating complexity, code churn, and developer activity metrics as indicators of software vulnerabilities},
   author={Shin, Yonghee and Meneely, Andrew and Williams, Laurie and Osborne, Jason A},
   journal={IEEE transactions on software engineering},
   volume={37},
   number={6},
   pages={772--787},
   year={2010},
   publisher={IEEE}
 }

 @article{10.2307/2282543,
  ISSN = {01621459},
  abstract = {A Wilcoxon one-sample signed rank test may be made when some of the observations are 0 by dropping the 0's before ranking. However, a sample can be not significantly positive while a more negative sample (obtained by decreasing each observation equally), is significantly positive by the ordinary Wilcoxon test. The reverse is also possible. Two-piece confidence regions result. A procedure for avoiding these difficulties is proposed, namely to rank the observations including the 0's, drop the ranks of the 0's, and reject the null hypothesis if the sum of the remaining negative (or positive) ranks falls in the tail of its null distribution (given the number of 0's). If observations are tied in absolute value, their ranks may be averaged before attaching signs. This changes the null distribution. A sample may be significantly positive which is not significant if the observations are increased (unequally), or if the ties are broken in any way.},
  author = {John W. Pratt},
  journal = {Journal of the American Statistical Association},
  number = {287},
  pages = {655--667},
  publisher = {[American Statistical Association, Taylor & Francis, Ltd.]},
  title = {Remarks on Zeros and Ties in the Wilcoxon Signed Rank Procedures},
  volume = {54},
  year = {1959}
 }

 @article{borges2015popularity,
   title={On the popularity of GitHub applications: A preliminary note},
   author={Borges, Hudson and Valente, Marco Tulio and Hora, Andre and Coelho, Jailton},
   journal={arXiv preprint arXiv:1507.00604},
   year={2015}
 }

 @article{10.2307/3001968,
  ISSN = {00994987},
  author = {Frank Wilcoxon},
  journal = {Biometrics Bulletin},
  number = {6},
  pages = {80--83},
  publisher = {[International Biometric Society, Wiley]},
  title = {Individual Comparisons by Ranking Methods},
  volume = {1},
  year = {1945}
 }

 @Article{baggen2012,
 author="Baggen, Robert
 and Correia, Jos{\'e} Pedro
 and Schill, Katrin
 and Visser, Joost",
 title="Standardized code quality benchmarking for improving software maintainability",
 journal="Software Quality Journal",
 year="2012",
 month="Jun",
 day="01",
 volume="20",
 number="2",
 pages="287--307",
 abstract="We provide an overview of the approach developed by the Software Improvement Group for code analysis and quality consulting focused on software maintainability. The approach uses a standardized measurement model based on the ISO/IEC 9126 definition of maintainability and source code metrics. Procedural standardization in evaluation projects further enhances the comparability of results. Individual assessments are stored in a repository that allows any system at hand to be compared to the industry-wide state of the art in code quality and maintainability. When a minimum level of software maintainability is reached, the certification body of T{\"U}V Informationstechnik GmbH issues a Trusted Product Maintainability certificate for the software product.",
 issn="1573-1367",
 doi="10.1007/s11219-011-9144-9",
 }

@INPROCEEDINGS{8919169,
  author={L. {Cruz} and R. {Abreu} and J. {Grundy} and L. {Li} and X. {Xia}},
  booktitle={2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
  title={Do Energy-Oriented Changes Hinder Maintainability?}, 
  year={2019},
  volume={},
  number={},
  pages={29-40},}

 @MastersThesis{Olivari:2018,
     author     =     {Michael Olivari},
     title     =     {{Maintainable Production: A Model of Developer Productivity Based on
Source Code Contributions}},
     school     =     {University of Amsterdam},
     year     =     {2018},
     }

@article{da2017framework,
	Author = {da Costa, Daniel Alencar and McIntosh, Shane and Shang, Weiyi and Kulesza, Uir{\'a} and Coelho, Roberta and Hassan, Ahmed E},
	Journal = {IEEE Transactions on Software Engineering},
	Number = {7},
	Pages = {641--657},
	Publisher = {IEEE},
	Title = {A framework for evaluating the results of the szz approach for identifying bug-introducing changes},
	Volume = {43},
	Year = {2017}
}

@inproceedings{10.1109/MSR.2019.00064,
author = {Ponta, Serena E. and Plate, Henrik and Sabetta, Antonino and Bezzi, Michele and Dangremont, C\'{e}dric},
title = {A Manually-Curated Dataset of Fixes to Vulnerabilities of Open-Source Software},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MSR.2019.00064},
doi = {10.1109/MSR.2019.00064},
booktitle = {Proceedings of the 16th International Conference on Mining Software Repositories},
pages = {383–387},
numpages = {5},
location = {Montreal, Quebec, Canada},
series = {MSR ’19}
}


@inproceedings{pascarella2018self,
	Author = {Pascarella, Luca and Geiger, Franz-Xaver and Palomba, Fabio and Di Nucci, Dario and Malavolta, Ivano and Bacchelli, Alberto},
	Booktitle = {5th IEEE/ACM International Conference on Mobile Software Engineering and Systems, New York, NY},
	Title = {Self-Reported Activities of Android Developers},
	Year = {2018}
}

@book{Visser:2016:OREILLY,
  author = {Joost Visser},
  title = {Building Maintainable Software, Java Edition: Ten Guidelines for Future-Proof Code},
  issue_date = {2016},
  publisher = {O'Reilly Media, Inc.}
  }


@techreport{oswap:2017,
	author ={The OWASP Foundation},
	title       = {OWASP Top 10 - 2017: The Ten Most Critical Web Application Security Risks},
	institution = {The OWASP Foundation},
	month       = {February},
	year        = {2017},
	note =  {Release Candidate}
}

@techreport{oswap:2013,
	author ={The OWASP Foundation},
	title       = {OWASP Top 10 - 2017: The Ten Most Critical Web Application Security Risks},
	institution = {The OWASP Foundation},
	month       = {February},
	year        = {2017},
	note =  {Release Candidate}
}

@misc{cacheOut,
title={{CacheOut}: Leaking Data on {Intel} {CPUs} via Cache Evictions},
author={van Schaik, Stephan and Minkin, Marina and Kwong, Andrew and Genkin, Daniel and Yarom, Yuval},
howpublished = {\url{https://cacheoutattack.com/}},
year={2020},
}

@inproceedings{10.1145/3133956.3134072,
author = {Li, Frank and Paxson, Vern},
title = {A Large-Scale Empirical Study of Security Patches},
year = {2017},
isbn = {9781450349468},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3133956.3134072},
doi = {10.1145/3133956.3134072},
booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
pages = {2201–2215},
numpages = {15},
keywords = {patch complexity, vulnerabilities, security patches, empirical study},
location = {Dallas, Texas, USA},
series = {CCS '17}
}

@INPROCEEDINGS{5609747,  
author={T. L. {Alves} and C. {Ypma} and J. {Visser}},  
booktitle={2010 IEEE International Conference on Software Maintenance},   
title={Deriving metric thresholds from benchmark data},   year={2010},  volume={},  number={},  pages={1-10},  doi={10.1109/ICSM.2010.5609747}}

@INPROCEEDINGS{6113040,  author={T. L. {Alves} and J. P. {Correia} and J. {Visser}},  
booktitle={2011 Joint Conference of the 21st International Workshop on Software Measurement and the 6th International Conference on Software Process and Product Measurement},   
title={Benchmark-Based Aggregation of Metrics to Ratings},   
year={2011},  volume={},  number={},  pages={20-29},  doi={10.1109/IWSM-MENSURA.2011.15}}


@INPROCEEDINGS{reis2017secbench,
  title={SECBENCH: A Database of Real Security Vulnerabilities.},
  booktitle={Proceedings of the International Workshop on Secure Software Engineering in DevOps and Agile Development (SecSE 2017)},
  author={Reis, Sofia and Abreu, Rui},
  year={2017}
}